System.register(["./lil-gui.esm-legacy.bf105428.js","./OrbitControls-legacy.1f04e8e4.js","./GLTFLoader-legacy.3fb5d659.js","./index-legacy.7b4e3796.js"],(function(t,e){"use strict";var i,s,n,o,r,a,l,h,c,d,u,p,y,v,w,m,f,A,g,x,b,q,E,z,S,B;return{setters:[t=>{i=t.G},t=>{s=t.S,n=t.D,o=t.C,r=t.s,a=t.P,l=t.M,h=t.a,c=t.b,d=t.c,u=t.d,p=t.B,y=t.O,v=t.W,w=t.A,m=t.e,f=t.N,A=t.L,g=t.R,x=t.f,b=t.g},t=>{q=t.G},t=>{E=t.o,z=t.a,S=t.b,B=t.c}],execute:function(){class M{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new R);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new R);const i=this.elements,s=t.x,n=t.y,o=t.z;return e.x=i[0]*s+i[1]*n+i[2]*o,e.y=i[3]*s+i[4]*n+i[5]*o,e.z=i[6]*s+i[7]*n+i[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){void 0===e&&(e=new M);const i=this.elements,s=t.elements,n=e.elements,o=i[0],r=i[1],a=i[2],l=i[3],h=i[4],c=i[5],d=i[6],u=i[7],p=i[8],y=s[0],v=s[1],w=s[2],m=s[3],f=s[4],A=s[5],g=s[6],x=s[7],b=s[8];return n[0]=o*y+r*m+a*g,n[1]=o*v+r*f+a*x,n[2]=o*w+r*A+a*b,n[3]=l*y+h*m+c*g,n[4]=l*v+h*f+c*x,n[5]=l*w+h*A+c*b,n[6]=d*y+u*m+p*g,n[7]=d*v+u*f+p*x,n[8]=d*w+u*A+p*b,e}scale(t,e){void 0===e&&(e=new M);const i=this.elements,s=e.elements;for(let n=0;3!==n;n++)s[3*n+0]=t.x*i[3*n+0],s[3*n+1]=t.y*i[3*n+1],s[3*n+2]=t.z*i[3*n+2];return e}solve(t,e){void 0===e&&(e=new R);const i=[];let s,n;for(s=0;s<12;s++)i.push(0);for(s=0;s<3;s++)for(n=0;n<3;n++)i[s+4*n]=this.elements[s+3*n];i[3]=t.x,i[7]=t.y,i[11]=t.z;let o=3;const r=o;let a,l;do{if(s=r-o,0===i[s+4*s])for(n=s+1;n<r;n++)if(0!==i[s+4*n]){a=4;do{l=4-a,i[l+4*s]+=i[l+4*n]}while(--a);break}if(0!==i[s+4*s])for(n=s+1;n<r;n++){const t=i[s+4*n]/i[s+4*s];a=4;do{l=4-a,i[l+4*n]=l<=s?0:i[l+4*n]-i[l+4*s]*t}while(--a)}}while(--o);if(e.z=i[11]/i[10],e.y=(i[7]-i[6]*e.z)/i[5],e.x=(i[3]-i[2]*e.z-i[1]*e.y)/i[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,i){if(void 0===i)return this.elements[e+3*t];this.elements[e+3*t]=i}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let e=0;e<9;e++)t+=this.elements[e]+",";return t}reverse(t){void 0===t&&(t=new M);const e=C;let i,s;for(i=0;i<3;i++)for(s=0;s<3;s++)e[i+6*s]=this.elements[i+3*s];e[3]=1,e[9]=0,e[15]=0,e[4]=0,e[10]=1,e[16]=0,e[5]=0,e[11]=0,e[17]=1;let n=3;const o=n;let r,a;do{if(i=o-n,0===e[i+6*i])for(s=i+1;s<o;s++)if(0!==e[i+6*s]){r=6;do{a=6-r,e[a+6*i]+=e[a+6*s]}while(--r);break}if(0!==e[i+6*i])for(s=i+1;s<o;s++){const t=e[i+6*s]/e[i+6*i];r=6;do{a=6-r,e[a+6*s]=a<=i?0:e[a+6*s]-e[a+6*i]*t}while(--r)}}while(--n);i=2;do{s=i-1;do{const t=e[i+6*s]/e[i+6*i];r=6;do{a=6-r,e[a+6*s]=e[a+6*s]-e[a+6*i]*t}while(--r)}while(s--)}while(--i);i=2;do{const t=1/e[i+6*i];r=6;do{a=6-r,e[a+6*i]=e[a+6*i]*t}while(--r)}while(i--);i=2;do{s=2;do{if(a=e[3+s+6*i],isNaN(a)||a===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,s,a)}while(s--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,i=t.y,s=t.z,n=t.w,o=e+e,r=i+i,a=s+s,l=e*o,h=e*r,c=e*a,d=i*r,u=i*a,p=s*a,y=n*o,v=n*r,w=n*a,m=this.elements;return m[0]=1-(d+p),m[1]=h-w,m[2]=c+v,m[3]=h+w,m[4]=1-(l+p),m[5]=u-y,m[6]=c-v,m[7]=u+y,m[8]=1-(l+d),this}transpose(t){void 0===t&&(t=new M);const e=this.elements,i=t.elements;let s;return i[0]=e[0],i[4]=e[4],i[8]=e[8],s=e[1],i[1]=e[3],i[3]=s,s=e[2],i[2]=e[6],i[6]=s,s=e[5],i[5]=e[7],i[7]=s,t}}const C=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class R{constructor(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),this.x=t,this.y=e,this.z=i}cross(t,e){void 0===e&&(e=new R);const i=t.x,s=t.y,n=t.z,o=this.x,r=this.y,a=this.z;return e.x=r*n-a*s,e.y=a*i-o*n,e.z=o*s-r*i,e}set(t,e,i){return this.x=t,this.y=e,this.z=i,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new R(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new R(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new M([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,i=this.z,s=Math.sqrt(t*t+e*e+i*i);if(s>0){const t=1/s;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return s}unit(t){void 0===t&&(t=new R);const e=this.x,i=this.y,s=this.z;let n=Math.sqrt(e*e+i*i+s*s);return n>0?(n=1/n,t.x=e*n,t.y=i*n,t.z=s*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,i=this.z;return Math.sqrt(t*t+e*e+i*i)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,i=this.y,s=this.z,n=t.x,o=t.y,r=t.z;return Math.sqrt((n-e)*(n-e)+(o-i)*(o-i)+(r-s)*(r-s))}distanceSquared(t){const e=this.x,i=this.y,s=this.z,n=t.x,o=t.y,r=t.z;return(n-e)*(n-e)+(o-i)*(o-i)+(r-s)*(r-s)}scale(t,e){void 0===e&&(e=new R);const i=this.x,s=this.y,n=this.z;return e.x=t*i,e.y=t*s,e.z=t*n,e}vmul(t,e){return void 0===e&&(e=new R),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,i){return void 0===i&&(i=new R),i.x=this.x+t*e.x,i.y=this.y+t*e.y,i.z=this.z+t*e.z,i}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new R),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const i=this.length();if(i>0){const s=F,n=1/i;s.set(this.x*n,this.y*n,this.z*n);const o=N;Math.abs(s.x)<.9?(o.set(1,0,0),s.cross(o,t)):(o.set(0,1,0),s.cross(o,t)),s.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,i){const s=this.x,n=this.y,o=this.z;i.x=s+(t.x-s)*e,i.y=n+(t.y-n)*e,i.z=o+(t.z-o)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(I),I.almostEquals(t,e)}clone(){return new R(this.x,this.y,this.z)}}R.ZERO=new R(0,0,0),R.UNIT_X=new R(1,0,0),R.UNIT_Y=new R(0,1,0),R.UNIT_Z=new R(0,0,1);const F=new R,N=new R,I=new R;class L{constructor(t){void 0===t&&(t={}),this.lowerBound=new R,this.upperBound=new R,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,i,s){const n=this.lowerBound,o=this.upperBound,r=i;n.copy(t[0]),r&&r.vmult(n,n),o.copy(n);for(let a=1;a<t.length;a++){let e=t[a];r&&(r.vmult(e,P),e=P),e.x>o.x&&(o.x=e.x),e.x<n.x&&(n.x=e.x),e.y>o.y&&(o.y=e.y),e.y<n.y&&(n.y=e.y),e.z>o.z&&(o.z=e.z),e.z<n.z&&(n.z=e.z)}return e&&(e.vadd(n,n),e.vadd(o,o)),s&&(n.x-=s,n.y-=s,n.z-=s,o.x+=s,o.y+=s,o.z+=s),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new L).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,i=this.upperBound,s=t.lowerBound,n=t.upperBound,o=s.x<=i.x&&i.x<=n.x||e.x<=n.x&&n.x<=i.x,r=s.y<=i.y&&i.y<=n.y||e.y<=n.y&&n.y<=i.y,a=s.z<=i.z&&i.z<=n.z||e.z<=n.z&&n.z<=i.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,i=this.upperBound,s=t.lowerBound,n=t.upperBound;return e.x<=s.x&&i.x>=n.x&&e.y<=s.y&&i.y>=n.y&&e.z<=s.z&&i.z>=n.z}getCorners(t,e,i,s,n,o,r,a){const l=this.lowerBound,h=this.upperBound;t.copy(l),e.set(h.x,l.y,l.z),i.set(h.x,h.y,l.z),s.set(l.x,h.y,h.z),n.set(h.x,l.y,h.z),o.set(l.x,h.y,l.z),r.set(l.x,l.y,h.z),a.copy(h)}toLocalFrame(t,e){const i=T,s=i[0],n=i[1],o=i[2],r=i[3],a=i[4],l=i[5],h=i[6],c=i[7];this.getCorners(s,n,o,r,a,l,h,c);for(let d=0;8!==d;d++){const e=i[d];t.pointToLocal(e,e)}return e.setFromPoints(i)}toWorldFrame(t,e){const i=T,s=i[0],n=i[1],o=i[2],r=i[3],a=i[4],l=i[5],h=i[6],c=i[7];this.getCorners(s,n,o,r,a,l,h,c);for(let d=0;8!==d;d++){const e=i[d];t.pointToWorld(e,e)}return e.setFromPoints(i)}overlapsRay(t){const{direction:e,from:i}=t,s=1/e.x,n=1/e.y,o=1/e.z,r=(this.lowerBound.x-i.x)*s,a=(this.upperBound.x-i.x)*s,l=(this.lowerBound.y-i.y)*n,h=(this.upperBound.y-i.y)*n,c=(this.lowerBound.z-i.z)*o,d=(this.upperBound.z-i.z)*o,u=Math.max(Math.max(Math.min(r,a),Math.min(l,h)),Math.min(c,d)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,h)),Math.max(c,d));return!(p<0||u>p)}}const P=new R,T=[new R,new R,new R,new R,new R,new R,new R,new R];class j{constructor(){this.matrix=[]}get(t,e){let{index:i}=t,{index:s}=e;if(s>i){const t=s;s=i,i=t}return this.matrix[(i*(i+1)>>1)+s-1]}set(t,e,i){let{index:s}=t,{index:n}=e;if(n>s){const t=n;n=s,s=t}this.matrix[(s*(s+1)>>1)+n-1]=i?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class W{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const i=this._listeners;return void 0===i[t]&&(i[t]=[]),i[t].includes(e)||i[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const i=this._listeners;return!(void 0===i[t]||!i[t].includes(e))}hasAnyEventListener(t){return void 0!==this._listeners&&void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const i=this._listeners;if(void 0===i[t])return this;const s=i[t].indexOf(e);return-1!==s&&i[t].splice(s,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let i=0,s=e.length;i<s;i++)e[i].call(this,t)}return this}}class O{constructor(t,e,i,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===s&&(s=1),this.x=t,this.y=e,this.z=i,this.w=s}set(t,e,i,s){return this.x=t,this.y=e,this.z=i,this.w=s,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const i=Math.sin(.5*e);return this.x=t.x*i,this.y=t.y*i,this.z=t.z*i,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new R),this.normalize();const e=2*Math.acos(this.w),i=Math.sqrt(1-this.w*this.w);return i<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/i,t.y=this.y/i,t.z=this.z/i),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=k,i=V;t.tangents(e,i),this.setFromAxisAngle(e,Math.PI)}else{const i=t.cross(e);this.x=i.x,this.y=i.y,this.z=i.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new O);const i=this.x,s=this.y,n=this.z,o=this.w,r=t.x,a=t.y,l=t.z,h=t.w;return e.x=i*h+o*r+s*l-n*a,e.y=s*h+o*a+n*r-i*l,e.z=n*h+o*l+i*a-s*r,e.w=o*h-i*r-s*a-n*l,e}inverse(t){void 0===t&&(t=new O);const e=this.x,i=this.y,s=this.z,n=this.w;this.conjugate(t);const o=1/(e*e+i*i+s*s+n*n);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return void 0===t&&(t=new O),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new R);const i=t.x,s=t.y,n=t.z,o=this.x,r=this.y,a=this.z,l=this.w,h=l*i+r*n-a*s,c=l*s+a*i-o*n,d=l*n+o*s-r*i,u=-o*i-r*s-a*n;return e.x=h*l+u*-o+c*-a-d*-r,e.y=c*l+u*-r+d*-o-h*-a,e.z=d*l+u*-a+h*-r-c*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let i,s,n;void 0===e&&(e="YZX");const o=this.x,r=this.y,a=this.z,l=this.w;if("YZX"!==e)throw new Error(`Euler order ${e} not supported yet.`);{const t=o*r+a*l;if(t>.499&&(i=2*Math.atan2(o,l),s=Math.PI/2,n=0),t<-.499&&(i=-2*Math.atan2(o,l),s=-Math.PI/2,n=0),void 0===i){const e=o*o,h=r*r,c=a*a;i=Math.atan2(2*r*l-2*o*a,1-2*h-2*c),s=Math.asin(2*t),n=Math.atan2(2*o*l-2*r*a,1-2*e-2*c)}}t.y=i,t.z=s,t.x=n}setFromEuler(t,e,i,s){void 0===s&&(s="XYZ");const n=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(i/2),a=Math.sin(t/2),l=Math.sin(e/2),h=Math.sin(i/2);return"XYZ"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"YXZ"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"ZXY"===s?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"ZYX"===s?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"YZX"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r-a*l*h):"XZY"===s&&(this.x=a*o*r-n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r+a*l*h),this}clone(){return new O(this.x,this.y,this.z,this.w)}slerp(t,e,i){void 0===i&&(i=new O);const s=this.x,n=this.y,o=this.z,r=this.w;let a,l,h,c,d,u=t.x,p=t.y,y=t.z,v=t.w;return l=s*u+n*p+o*y+r*v,l<0&&(l=-l,u=-u,p=-p,y=-y,v=-v),1-l>1e-6?(a=Math.acos(l),h=Math.sin(a),c=Math.sin((1-e)*a)/h,d=Math.sin(e*a)/h):(c=1-e,d=e),i.x=c*s+d*u,i.y=c*n+d*p,i.z=c*o+d*y,i.w=c*r+d*v,i}integrate(t,e,i,s){void 0===s&&(s=new O);const n=t.x*i.x,o=t.y*i.y,r=t.z*i.z,a=this.x,l=this.y,h=this.z,c=this.w,d=.5*e;return s.x+=d*(n*c+o*h-r*l),s.y+=d*(o*c+r*a-n*h),s.z+=d*(r*c+n*l-o*a),s.w+=d*(-n*a-o*l-r*h),s}}const k=new R,V=new R;class U{constructor(t){void 0===t&&(t={}),this.id=U.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,i,s){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}U.idCounter=0,U.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class H{constructor(t){void 0===t&&(t={}),this.position=new R,this.quaternion=new O,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return H.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return H.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new R),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,i,s){return void 0===s&&(s=new R),i.vsub(t,s),e.conjugate(D),D.vmult(s,s),s}static pointToWorldFrame(t,e,i,s){return void 0===s&&(s=new R),e.vmult(i,s),s.vadd(t,s),s}static vectorToWorldFrame(t,e,i){return void 0===i&&(i=new R),t.vmult(e,i),i}static vectorToLocalFrame(t,e,i,s){return void 0===s&&(s=new R),e.w*=-1,e.vmult(i,s),e.w*=-1,s}}const D=new O;class G extends U{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:i=[],normals:s=[],axes:n,boundingSphereRadius:o}=t;super({type:U.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=i,this.faceNormals=s,0===this.faceNormals.length&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=n?n.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,i=this.uniqueEdges;i.length=0;const s=new R;for(let n=0;n!==t.length;n++){const o=t[n],r=o.length;for(let t=0;t!==r;t++){const n=(t+1)%r;e[o[t]].vsub(e[o[n]],s),s.normalize();let a=!1;for(let t=0;t!==i.length;t++)if(i[t].almostEquals(s)||i[t].almostEquals(s)){a=!0;break}a||i.push(s.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let s=0;s<this.faces[t].length;s++)if(!this.vertices[this.faces[t][s]])throw new Error(`Vertex ${this.faces[t][s]} not found!`);const e=this.faceNormals[t]||new R;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const i=this.vertices[this.faces[t][0]];if(e.dot(i)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let e=0;e<this.faces[t].length;e++)console.warn(`.vertices[${this.faces[t][e]}] = Vec3(${this.vertices[this.faces[t][e]].toString()})`)}}}getFaceNormal(t,e){const i=this.faces[t],s=this.vertices[i[0]],n=this.vertices[i[1]],o=this.vertices[i[2]];G.computeNormal(s,n,o,e)}static computeNormal(t,e,i,s){const n=new R,o=new R;e.vsub(t,o),i.vsub(e,n),n.cross(o,s),s.isZero()||s.normalize()}clipAgainstHull(t,e,i,s,n,o,r,a,l){const h=new R;let c=-1,d=-Number.MAX_VALUE;for(let p=0;p<i.faces.length;p++){h.copy(i.faceNormals[p]),n.vmult(h,h);const t=h.dot(o);t>d&&(d=t,c=p)}const u=[];for(let p=0;p<i.faces[c].length;p++){const t=i.vertices[i.faces[c][p]],e=new R;e.copy(t),n.vmult(e,e),s.vadd(e,e),u.push(e)}c>=0&&this.clipFaceAgainstHull(o,t,e,u,r,a,l)}findSeparatingAxis(t,e,i,s,n,o,r,a){const l=new R,h=new R,c=new R,d=new R,u=new R,p=new R;let y=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let w=0;w!==v.uniqueAxes.length;w++){i.vmult(v.uniqueAxes[w],l);const r=v.testSepAxis(l,t,e,i,s,n);if(!1===r)return!1;r<y&&(y=r,o.copy(l))}else{const a=r?r.length:v.faces.length;for(let h=0;h<a;h++){const a=r?r[h]:h;l.copy(v.faceNormals[a]),i.vmult(l,l);const c=v.testSepAxis(l,t,e,i,s,n);if(!1===c)return!1;c<y&&(y=c,o.copy(l))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){n.vmult(t.uniqueAxes[w],h);const r=v.testSepAxis(h,t,e,i,s,n);if(!1===r)return!1;r<y&&(y=r,o.copy(h))}else{const r=a?a.length:t.faces.length;for(let l=0;l<r;l++){const r=a?a[l]:l;h.copy(t.faceNormals[r]),n.vmult(h,h);const c=v.testSepAxis(h,t,e,i,s,n);if(!1===c)return!1;c<y&&(y=c,o.copy(h))}}for(let w=0;w!==v.uniqueEdges.length;w++){i.vmult(v.uniqueEdges[w],d);for(let r=0;r!==t.uniqueEdges.length;r++)if(n.vmult(t.uniqueEdges[r],u),d.cross(u,p),!p.almostZero()){p.normalize();const r=v.testSepAxis(p,t,e,i,s,n);if(!1===r)return!1;r<y&&(y=r,o.copy(p))}}return s.vsub(e,c),c.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,i,s,n,o){G.project(this,t,i,s,Y),G.project(e,t,n,o,X);const r=Y[0],a=Y[1],l=X[0],h=X[1];if(r<h||l<a)return!1;const c=r-h,d=l-a;return c<d?c:d}calculateLocalInertia(t,e){const i=new R,s=new R;this.computeLocalAABB(s,i);const n=i.x-s.x,o=i.y-s.y,r=i.z-s.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*n*2*n+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],i=this.faceNormals[t],s=this.vertices[e[0]];return-i.dot(s)}clipFaceAgainstHull(t,e,i,s,n,o,r){const a=new R,l=new R,h=new R,c=new R,d=new R,u=new R,p=new R,y=new R,v=this,w=s,m=[];let f=-1,A=Number.MAX_VALUE;for(let E=0;E<v.faces.length;E++){a.copy(v.faceNormals[E]),i.vmult(a,a);const e=a.dot(t);e<A&&(A=e,f=E)}if(f<0)return;const g=v.faces[f];g.connectedFaces=[];for(let E=0;E<v.faces.length;E++)for(let t=0;t<v.faces[E].length;t++)-1!==g.indexOf(v.faces[E][t])&&E!==f&&-1===g.connectedFaces.indexOf(E)&&g.connectedFaces.push(E);const x=g.length;for(let E=0;E<x;E++){const t=v.vertices[g[E]],s=v.vertices[g[(E+1)%x]];t.vsub(s,l),h.copy(l),i.vmult(h,h),e.vadd(h,h),c.copy(this.faceNormals[f]),i.vmult(c,c),e.vadd(c,c),h.cross(c,d),d.negate(d),u.copy(t),i.vmult(u,u),e.vadd(u,u);const n=g.connectedFaces[E];p.copy(this.faceNormals[n]);const o=this.getPlaneConstantOfFace(n);y.copy(p),i.vmult(y,y);const r=o-y.dot(e);for(this.clipFaceAgainstPlane(w,m,y,r);w.length;)w.shift();for(;m.length;)w.push(m.shift())}p.copy(this.faceNormals[f]);const b=this.getPlaneConstantOfFace(f);y.copy(p),i.vmult(y,y);const q=b-y.dot(e);for(let E=0;E<w.length;E++){let t=y.dot(w[E])+q;if(t<=n&&(console.log(`clamped: depth=${t} to minDist=${n}`),t=n),t<=o){const e=w[E];if(t<=1e-6){const i={point:e,normal:y,depth:t};r.push(i)}}}}clipFaceAgainstPlane(t,e,i,s){let n,o;const r=t.length;if(r<2)return e;let a=t[t.length-1],l=t[0];n=i.dot(a)+s;for(let h=0;h<r;h++){if(l=t[h],o=i.dot(l)+s,n<0)if(o<0){const t=new R;t.copy(l),e.push(t)}else{const t=new R;a.lerp(l,n/(n-o),t),e.push(t)}else if(o<0){const t=new R;a.lerp(l,n/(n-o),t),e.push(t),e.push(l)}a=l,n=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new R);const i=this.vertices,s=this.worldVertices;for(let n=0;n!==this.vertices.length;n++)e.vmult(i[n],s[n]),t.vadd(s[n],s[n]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const i=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let s=0;s<this.vertices.length;s++){const n=i[s];n.x<t.x?t.x=n.x:n.x>e.x&&(e.x=n.x),n.y<t.y?t.y=n.y:n.y>e.y&&(e.y=n.y),n.z<t.z?t.z=n.z:n.z>e.z&&(e.z=n.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new R);const i=this.faceNormals,s=this.worldFaceNormals;for(let n=0;n!==e;n++)t.vmult(i[n],s[n]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let i=0;i!==e.length;i++){const s=e[i].lengthSquared();s>t&&(t=s)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,i,s){const n=this.vertices;let o,r,a,l,h,c,d=new R;for(let u=0;u<n.length;u++){d.copy(n[u]),e.vmult(d,d),t.vadd(d,d);const i=d;(void 0===o||i.x<o)&&(o=i.x),(void 0===l||i.x>l)&&(l=i.x),(void 0===r||i.y<r)&&(r=i.y),(void 0===h||i.y>h)&&(h=i.y),(void 0===a||i.z<a)&&(a=i.z),(void 0===c||i.z>c)&&(c=i.z)}i.set(o,r,a),s.set(l,h,c)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new R);const e=this.vertices;for(let i=0;i<e.length;i++)t.vadd(e[i],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const i=this.vertices.length,s=this.vertices;if(e){for(let t=0;t<i;t++){const i=s[t];e.vmult(i,i)}for(let t=0;t<this.faceNormals.length;t++){const i=this.faceNormals[t];e.vmult(i,i)}}if(t)for(let n=0;n<i;n++){const e=s[n];e.vadd(t,e)}}pointIsInside(t){const e=this.vertices,i=this.faces,s=this.faceNormals,n=new R;this.getAveragePointLocal(n);for(let o=0;o<this.faces.length;o++){let r=s[o];const a=e[i[o][0]],l=new R;t.vsub(a,l);const h=r.dot(l),c=new R;n.vsub(a,c);const d=r.dot(c);if(h<0&&d>0||h>0&&d<0)return!1}return-1}static project(t,e,i,s,n){const o=t.vertices.length,r=_;let a=0,l=0;const h=K,c=t.vertices;h.setZero(),H.vectorToLocalFrame(i,s,e,r),H.pointToLocalFrame(i,s,h,h);const d=h.dot(r);l=a=c[0].dot(r);for(let u=1;u<o;u++){const t=c[u].dot(r);t>a&&(a=t),t<l&&(l=t)}if(l-=d,a-=d,l>a){const t=l;l=a,a=t}n[0]=a,n[1]=l}}const Y=[],X=[];new R;const _=new R,K=new R;class Z extends U{constructor(t){super({type:U.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,i=this.halfExtents.z,s=R,n=[new s(-t,-e,-i),new s(t,-e,-i),new s(t,e,-i),new s(-t,e,-i),new s(-t,-e,i),new s(t,-e,i),new s(t,e,i),new s(-t,e,i)],o=[new s(0,0,1),new s(0,1,0),new s(1,0,0)],r=new G({vertices:n,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:o});this.convexPolyhedronRepresentation=r,r.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new R),Z.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,i){const s=t;i.x=1/12*e*(2*s.y*2*s.y+2*s.z*2*s.z),i.y=1/12*e*(2*s.x*2*s.x+2*s.z*2*s.z),i.z=1/12*e*(2*s.y*2*s.y+2*s.x*2*s.x)}getSideNormals(t,e){const i=t,s=this.halfExtents;if(i[0].set(s.x,0,0),i[1].set(0,s.y,0),i[2].set(0,0,s.z),i[3].set(-s.x,0,0),i[4].set(0,-s.y,0),i[5].set(0,0,-s.z),void 0!==e)for(let n=0;n!==i.length;n++)e.vmult(i[n],i[n]);return i}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,i){const s=this.halfExtents,n=[[s.x,s.y,s.z],[-s.x,s.y,s.z],[-s.x,-s.y,s.z],[-s.x,-s.y,-s.z],[s.x,-s.y,-s.z],[s.x,s.y,-s.z],[-s.x,s.y,-s.z],[s.x,-s.y,s.z]];for(let o=0;o<n.length;o++)Q.set(n[o][0],n[o][1],n[o][2]),e.vmult(Q,Q),t.vadd(Q,Q),i(Q.x,Q.y,Q.z)}calculateWorldAABB(t,e,i,s){const n=this.halfExtents;$[0].set(n.x,n.y,n.z),$[1].set(-n.x,n.y,n.z),$[2].set(-n.x,-n.y,n.z),$[3].set(-n.x,-n.y,-n.z),$[4].set(n.x,-n.y,-n.z),$[5].set(n.x,n.y,-n.z),$[6].set(-n.x,n.y,-n.z),$[7].set(n.x,-n.y,n.z);const o=$[0];e.vmult(o,o),t.vadd(o,o),s.copy(o),i.copy(o);for(let r=1;r<8;r++){const n=$[r];e.vmult(n,n),t.vadd(n,n);const o=n.x,a=n.y,l=n.z;o>s.x&&(s.x=o),a>s.y&&(s.y=a),l>s.z&&(s.z=l),o<i.x&&(i.x=o),a<i.y&&(i.y=a),l<i.z&&(i.z=l)}}}const Q=new R,$=[new R,new R,new R,new R,new R,new R,new R,new R],J=1,tt=2,et=4,it=0,st=1,nt=2;class ot extends W{constructor(t){void 0===t&&(t={}),super(),this.id=ot.idCounter++,this.index=-1,this.world=null,this.vlambda=new R,this.collisionFilterGroup="number"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof t.collisionResponse||t.collisionResponse,this.position=new R,this.previousPosition=new R,this.interpolatedPosition=new R,this.initPosition=new R,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new R,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new R,this.force=new R;const e="number"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?ot.STATIC:ot.DYNAMIC,typeof t.type==typeof ot.STATIC&&(this.type=t.type),this.allowSleep=void 0===t.allowSleep||t.allowSleep,this.sleepState=ot.AWAKE,this.sleepSpeedLimit=void 0!==t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new R,this.quaternion=new O,this.initQuaternion=new O,this.previousQuaternion=new O,this.interpolatedQuaternion=new O,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new R,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new R,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new R,this.invInertia=new R,this.invInertiaWorld=new M,this.invMassSolve=0,this.invInertiaSolve=new R,this.invInertiaWorldSolve=new M,this.fixedRotation=void 0!==t.fixedRotation&&t.fixedRotation,this.angularDamping=void 0!==t.angularDamping?t.angularDamping:.01,this.linearFactor=new R(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new R(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new L,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new R,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=ot.AWAKE,this.wakeUpAfterNarrowphase=!1,t===ot.SLEEPING&&this.dispatchEvent(ot.wakeupEvent)}sleep(){this.sleepState=ot.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,i=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),s=this.sleepSpeedLimit**2;e===ot.AWAKE&&i<s?(this.sleepState=ot.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(ot.sleepyEvent)):e===ot.SLEEPY&&i>s?this.wakeUp():e===ot.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(ot.sleepEvent))}}updateSolveMassProperties(){this.sleepState===ot.SLEEPING||this.type===ot.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new R),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new R),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new R),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new R),this.quaternion.vmult(t,e),e}addShape(t,e,i){const s=new R,n=new O;return e&&s.copy(e),i&&n.copy(i),this.shapes.push(t),this.shapeOffsets.push(s),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,i=t.length;let s=0;for(let n=0;n!==i;n++){const i=t[n];i.updateBoundingSphereRadius();const o=e[n].length(),r=i.boundingSphereRadius;o+r>s&&(s=o+r)}this.boundingRadius=s}updateAABB(){const t=this.shapes,e=this.shapeOffsets,i=this.shapeOrientations,s=t.length,n=rt,o=at,r=this.quaternion,a=this.aabb,l=lt;for(let h=0;h!==s;h++){const s=t[h];r.vmult(e[h],n),n.vadd(this.position,n),r.mult(i[h],o),s.calculateWorldAABB(n,o,l.lowerBound,l.upperBound),0===h?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=ht,i=ct;t.setRotationFromQuaternion(this.quaternion),t.transpose(i),t.scale(e,t),t.mmult(i,this.invInertiaWorld)}}applyForce(t,e){if(void 0===e&&(e=new R),this.type!==ot.DYNAMIC)return;this.sleepState===ot.SLEEPING&&this.wakeUp();const i=dt;e.cross(t,i),this.force.vadd(t,this.force),this.torque.vadd(i,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new R),this.type!==ot.DYNAMIC)return;const i=ut,s=pt;this.vectorToWorldFrame(t,i),this.vectorToWorldFrame(e,s),this.applyForce(i,s)}applyTorque(t){this.type===ot.DYNAMIC&&(this.sleepState===ot.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new R),this.type!==ot.DYNAMIC)return;this.sleepState===ot.SLEEPING&&this.wakeUp();const i=e,s=yt;s.copy(t),s.scale(this.invMass,s),this.velocity.vadd(s,this.velocity);const n=vt;i.cross(t,n),this.invInertiaWorld.vmult(n,n),this.angularVelocity.vadd(n,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new R),this.type!==ot.DYNAMIC)return;const i=wt,s=mt;this.vectorToWorldFrame(t,i),this.vectorToWorldFrame(e,s),this.applyImpulse(i,s)}updateMassProperties(){const t=ft;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,i=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Z.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!i?1/e.x:0,e.y>0&&!i?1/e.y:0,e.z>0&&!i?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const i=new R;return t.vsub(this.position,i),this.angularVelocity.cross(i,e),this.velocity.vadd(e,e),e}integrate(t,e,i){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==ot.DYNAMIC&&this.type!==ot.KINEMATIC||this.sleepState===ot.SLEEPING)return;const s=this.velocity,n=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,h=this.invMass,c=this.invInertiaWorld,d=this.linearFactor,u=h*t;s.x+=r.x*u*d.x,s.y+=r.y*u*d.y,s.z+=r.z*u*d.z;const p=c.elements,y=this.angularFactor,v=a.x*y.x,w=a.y*y.y,m=a.z*y.z;n.x+=t*(p[0]*v+p[1]*w+p[2]*m),n.y+=t*(p[3]*v+p[4]*w+p[5]*m),n.z+=t*(p[6]*v+p[7]*w+p[8]*m),o.x+=s.x*t,o.y+=s.y*t,o.z+=s.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(i?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}ot.idCounter=0,ot.COLLIDE_EVENT_NAME="collide",ot.DYNAMIC=J,ot.STATIC=tt,ot.KINEMATIC=et,ot.AWAKE=it,ot.SLEEPY=st,ot.SLEEPING=nt,ot.wakeupEvent={type:"wakeup"},ot.sleepyEvent={type:"sleepy"},ot.sleepEvent={type:"sleep"};const rt=new R,at=new O,lt=new L,ht=new M,ct=new M,dt=(new M,new R),ut=new R,pt=new R,yt=new R,vt=new R,wt=new R,mt=new R,ft=new R;class At{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,i){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return 0!=(t.collisionFilterGroup&e.collisionFilterMask)&&0!=(e.collisionFilterGroup&t.collisionFilterMask)&&(0==(t.type&ot.STATIC)&&t.sleepState!==ot.SLEEPING||0==(e.type&ot.STATIC)&&e.sleepState!==ot.SLEEPING)}intersectionTest(t,e,i,s){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,i,s):this.doBoundingSphereBroadphase(t,e,i,s)}doBoundingSphereBroadphase(t,e,i,s){const n=gt;e.position.vsub(t.position,n);const o=(t.boundingRadius+e.boundingRadius)**2;n.lengthSquared()<o&&(i.push(t),s.push(e))}doBoundingBoxBroadphase(t,e,i,s){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(i.push(t),s.push(e))}makePairsUnique(t,e){const i=xt,s=bt,n=qt,o=t.length;for(let r=0;r!==o;r++)s[r]=t[r],n[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const t=s[r].id,e=n[r].id,o=t<e?`${t},${e}`:`${e},${t}`;i[o]=r,i.keys.push(o)}for(let r=0;r!==i.keys.length;r++){const o=i.keys.pop(),r=i[o];t.push(s[r]),e.push(n[r]),delete i[o]}}setWorld(t){}static boundingSphereCheck(t,e){const i=new R;t.position.vsub(e.position,i);const s=t.shapes[0],n=e.shapes[0];return Math.pow(s.boundingSphereRadius+n.boundingSphereRadius,2)>i.lengthSquared()}aabbQuery(t,e,i){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const gt=new R;new R,new O,new R;const xt={keys:[]},bt=[],qt=[];new R,new R,new R;class Et extends At{constructor(){super()}collisionPairs(t,e,i){const s=t.bodies,n=s.length;let o,r;for(let a=0;a!==n;a++)for(let t=0;t!==a;t++)o=s[a],r=s[t],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,i)}aabbQuery(t,e,i){void 0===i&&(i=[]);for(let s=0;s<t.bodies.length;s++){const n=t.bodies[s];n.aabbNeedsUpdate&&n.updateAABB(),n.aabb.overlaps(e)&&i.push(n)}return i}}class zt{constructor(){this.rayFromWorld=new R,this.rayToWorld=new R,this.hitNormalWorld=new R,this.hitPointWorld=new R,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,i,s,n,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(i),this.hitPointWorld.copy(s),this.shape=n,this.body=o,this.distance=r}}let St,Bt,Mt,Ct,Rt,Ft,Nt;const It=1,Lt=2,Pt=4;St=U.types.SPHERE,Bt=U.types.PLANE,Mt=U.types.BOX,Ct=U.types.CYLINDER,Rt=U.types.CONVEXPOLYHEDRON,Ft=U.types.HEIGHTFIELD,Nt=U.types.TRIMESH;class Tt{get[St](){return this._intersectSphere}get[Bt](){return this._intersectPlane}get[Mt](){return this._intersectBox}get[Ct](){return this._intersectConvex}get[Rt](){return this._intersectConvex}get[Ft](){return this._intersectHeightfield}get[Nt](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new R),void 0===e&&(e=new R),this.from=t.clone(),this.to=e.clone(),this.direction=new R,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Tt.ANY,this.result=new zt,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||Tt.ANY,this.result=e.result||new zt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(jt),Wt.length=0,t.broadphase.aabbQuery(t,jt,Wt),this.intersectBodies(Wt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const i=this.checkCollisionResponse;if(i&&!t.collisionResponse)return;if(0==(this.collisionFilterGroup&t.collisionFilterMask)||0==(t.collisionFilterGroup&this.collisionFilterMask))return;const s=Vt,n=Ut;for(let o=0,r=t.shapes.length;o<r;o++){const e=t.shapes[o];if((!i||e.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],n),t.quaternion.vmult(t.shapeOffsets[o],s),s.vadd(t.position,s),this.intersectShape(e,n,s,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let i=0,s=t.length;!this.result.shouldStop&&i<s;i++)this.intersectBody(t[i])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,i,s){const n=function(t,e,i){i.vsub(t,he);const s=he.dot(e);e.scale(s,ce),ce.vadd(t,ce);const n=i.distanceTo(ce);return n}(this.from,this.direction,i);if(n>t.boundingSphereRadius)return;const o=this[t.type];o&&o.call(this,t,e,i,s,t)}_intersectBox(t,e,i,s,n){return this._intersectConvex(t.convexPolyhedronRepresentation,e,i,s,n)}_intersectPlane(t,e,i,s,n){const o=this.from,r=this.to,a=this.direction,l=new R(0,0,1);e.vmult(l,l);const h=new R;o.vsub(i,h);const c=h.dot(l);if(r.vsub(i,h),c*h.dot(l)>0)return;if(o.distanceTo(r)<c)return;const d=l.dot(a);if(Math.abs(d)<this.precision)return;const u=new R,p=new R,y=new R;o.vsub(i,u);const v=-l.dot(u)/d;a.scale(v,p),o.vadd(p,y),this.reportIntersection(l,y,n,s,-1)}getAABB(t){const{lowerBound:e,upperBound:i}=t,s=this.to,n=this.from;e.x=Math.min(s.x,n.x),e.y=Math.min(s.y,n.y),e.z=Math.min(s.z,n.z),i.x=Math.max(s.x,n.x),i.y=Math.max(s.y,n.y),i.z=Math.max(s.z,n.z)}_intersectHeightfield(t,e,i,s,n){t.data,t.elementSize;const o=Kt;o.from.copy(this.from),o.to.copy(this.to),H.pointToLocalFrame(i,e,o.from,o.from),H.pointToLocalFrame(i,e,o.to,o.to),o.updateDirection();const r=Zt;let a,l,h,c;a=l=0,h=c=t.data.length-1;const d=new L;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),h=Math.min(h,r[0]+1),c=Math.min(c,r[1]+1);for(let u=a;u<h;u++)for(let r=l;r<c;r++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(u,r,d),d.overlapsRay(o)){if(t.getConvexTrianglePillar(u,r,!1),H.pointToWorldFrame(i,e,t.pillarOffset,_t),this._intersectConvex(t.pillarConvex,e,_t,s,n,Xt),this.result.shouldStop)return;t.getConvexTrianglePillar(u,r,!0),H.pointToWorldFrame(i,e,t.pillarOffset,_t),this._intersectConvex(t.pillarConvex,e,_t,s,n,Xt)}}}_intersectSphere(t,e,i,s,n){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-i.x)+(r.y-o.y)*(o.y-i.y)+(r.z-o.z)*(o.z-i.z)),c=h**2-4*l*((o.x-i.x)**2+(o.y-i.y)**2+(o.z-i.z)**2-a**2),d=Qt,u=$t;if(!(c<0))if(0===c)o.lerp(r,c,d),d.vsub(i,u),u.normalize(),this.reportIntersection(u,d,n,s,-1);else{const t=(-h-Math.sqrt(c))/(2*l),e=(-h+Math.sqrt(c))/(2*l);if(t>=0&&t<=1&&(o.lerp(r,t,d),d.vsub(i,u),u.normalize(),this.reportIntersection(u,d,n,s,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(o.lerp(r,e,d),d.vsub(i,u),u.normalize(),this.reportIntersection(u,d,n,s,-1))}}_intersectConvex(t,e,i,s,n,o){const r=Jt,a=te,l=o&&o.faceList||null,h=t.faces,c=t.vertices,d=t.faceNormals,u=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),w=l?l.length:h.length,m=this.result;for(let f=0;!m.shouldStop&&f<w;f++){const t=l?l[f]:f,o=h[t],y=d[t],w=e,A=i;a.copy(c[o[0]]),w.vmult(a,a),a.vadd(A,a),a.vsub(p,a),w.vmult(y,r);const g=u.dot(r);if(Math.abs(g)<this.precision)continue;const x=r.dot(a)/g;if(!(x<0)){u.scale(x,Ht),Ht.vadd(p,Ht),Dt.copy(c[o[0]]),w.vmult(Dt,Dt),A.vadd(Dt,Dt);for(let e=1;!m.shouldStop&&e<o.length-1;e++){Gt.copy(c[o[e]]),Yt.copy(c[o[e+1]]),w.vmult(Gt,Gt),w.vmult(Yt,Yt),A.vadd(Gt,Gt),A.vadd(Yt,Yt);const i=Ht.distanceTo(p);!Tt.pointInTriangle(Ht,Dt,Gt,Yt)&&!Tt.pointInTriangle(Ht,Gt,Dt,Yt)||i>v||this.reportIntersection(r,Ht,n,s,t)}}}}_intersectTrimesh(t,e,i,s,n,o){const r=ee,a=ae,l=le,h=te,c=ie,d=se,u=ne,p=re,y=oe,v=t.indices;t.vertices;const w=this.from,m=this.to,f=this.direction;l.position.copy(i),l.quaternion.copy(e),H.vectorToLocalFrame(i,e,f,c),H.pointToLocalFrame(i,e,w,d),H.pointToLocalFrame(i,e,m,u),u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.vsub(d,c),c.normalize();const A=d.distanceSquared(u);t.tree.rayQuery(this,l,a);for(let g=0,x=a.length;!this.result.shouldStop&&g!==x;g++){const o=a[g];t.getNormal(o,r),t.getVertex(v[3*o],Dt),Dt.vsub(d,h);const l=c.dot(r),u=r.dot(h)/l;if(u<0)continue;c.scale(u,Ht),Ht.vadd(d,Ht),t.getVertex(v[3*o+1],Gt),t.getVertex(v[3*o+2],Yt);const w=Ht.distanceSquared(d);!Tt.pointInTriangle(Ht,Gt,Dt,Yt)&&!Tt.pointInTriangle(Ht,Dt,Gt,Yt)||w>A||(H.vectorToWorldFrame(e,r,y),H.pointToWorldFrame(i,e,Ht,p),this.reportIntersection(y,p,n,s,o))}a.length=0}reportIntersection(t,e,i,s,n){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==n?n:-1,this.mode){case Tt.ALL:this.hasHit=!0,l.set(o,r,t,e,i,s,a),l.hasHit=!0,this.callback(l);break;case Tt.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,i,s,a));break;case Tt.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,i,s,a),l.shouldStop=!0}}static pointInTriangle(t,e,i,s){s.vsub(e,he),i.vsub(e,Ot),t.vsub(e,kt);const n=he.dot(he),o=he.dot(Ot),r=he.dot(kt),a=Ot.dot(Ot),l=Ot.dot(kt);let h,c;return(h=a*r-o*l)>=0&&(c=n*l-o*r)>=0&&h+c<n*a-o*o}}Tt.CLOSEST=It,Tt.ANY=Lt,Tt.ALL=Pt;const jt=new L,Wt=[],Ot=new R,kt=new R,Vt=new R,Ut=new O,Ht=new R,Dt=new R,Gt=new R,Yt=new R;new R,new zt;const Xt={faceList:[0]},_t=new R,Kt=new Tt,Zt=[],Qt=new R,$t=new R,Jt=new R;new R,new R;const te=new R,ee=new R,ie=new R,se=new R,ne=new R,oe=new R,re=new R;new L;const ae=[],le=new H,he=new R,ce=new R;class de extends At{static checkBounds(t,e,i){let s,n;0===i?(s=t.position.x,n=e.position.x):1===i?(s=t.position.y,n=e.position.y):2===i&&(s=t.position.z,n=e.position.z);const o=t.boundingRadius;return n-e.boundingRadius<s+o}static insertionSortX(t){for(let e=1,i=t.length;e<i;e++){const i=t[e];let s;for(s=e-1;s>=0&&!(t[s].aabb.lowerBound.x<=i.aabb.lowerBound.x);s--)t[s+1]=t[s];t[s+1]=i}return t}static insertionSortY(t){for(let e=1,i=t.length;e<i;e++){const i=t[e];let s;for(s=e-1;s>=0&&!(t[s].aabb.lowerBound.y<=i.aabb.lowerBound.y);s--)t[s+1]=t[s];t[s+1]=i}return t}static insertionSortZ(t){for(let e=1,i=t.length;e<i;e++){const i=t[e];let s;for(s=e-1;s>=0&&!(t[s].aabb.lowerBound.z<=i.aabb.lowerBound.z);s--)t[s+1]=t[s];t[s+1]=i}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=t=>{e.push(t.body)},this._removeBodyHandler=t=>{const i=e.indexOf(t.body);-1!==i&&e.splice(i,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,i){const s=this.axisList,n=s.length,o=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==n;r++){const t=s[r];for(a=r+1;a<n;a++){const n=s[a];if(this.needBroadphaseCollision(t,n)){if(!de.checkBounds(t,n,o))break;this.intersectionTest(t,n,e,i)}}}}sortList(){const t=this.axisList,e=this.axisIndex,i=t.length;for(let s=0;s!==i;s++){const e=t[s];e.aabbNeedsUpdate&&e.updateAABB()}0===e?de.insertionSortX(t):1===e?de.insertionSortY(t):2===e&&de.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,i=0,s=0,n=0,o=0;const r=this.axisList,a=r.length,l=1/a;for(let u=0;u!==a;u++){const a=r[u],l=a.position.x;t+=l,e+=l*l;const h=a.position.y;i+=h,s+=h*h;const c=a.position.z;n+=c,o+=c*c}const h=e-t*t*l,c=s-i*i*l,d=o-n*n*l;this.axisIndex=h>c?h>d?0:2:c>d?1:2}aabbQuery(t,e,i){void 0===i&&(i=[]),this.dirty&&(this.sortList(),this.dirty=!1);const s=this.axisIndex;let n="x";1===s&&(n="y"),2===s&&(n="z");const o=this.axisList;e.lowerBound[n],e.upperBound[n];for(let r=0;r<o.length;r++){const t=o[r];t.aabbNeedsUpdate&&t.updateAABB(),t.aabb.overlaps(e)&&i.push(t)}return i}}class ue{static defaults(t,e){void 0===t&&(t={});for(let i in e)i in t||(t[i]=e[i]);return t}}class pe{constructor(){this.spatial=new R,this.rotational=new R}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class ye{constructor(t,e,i,s){void 0===i&&(i=-1e6),void 0===s&&(s=1e6),this.id=ye.idCounter++,this.minForce=i,this.maxForce=s,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new pe,this.jacobianElementB=new pe,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,i){const s=e,n=t,o=i;this.a=4/(o*(1+4*s)),this.b=4*s/(1+4*s),this.eps=4/(o*o*n*(1+4*s))}computeB(t,e,i){const s=this.computeGW();return-this.computeGq()*t-s*e-this.computeGiMf()*i}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.position,o=s.position;return t.spatial.dot(n)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.velocity,o=s.velocity,r=i.angularVelocity,a=s.angularVelocity;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.vlambda,o=s.vlambda,r=i.wlambda,a=s.wlambda;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.force,o=i.torque,r=s.force,a=s.torque,l=i.invMassSolve,h=s.invMassSolve;return n.scale(l,ve),r.scale(h,we),i.invInertiaWorldSolve.vmult(o,me),s.invInertiaWorldSolve.vmult(a,fe),t.multiplyVectors(ve,me)+e.multiplyVectors(we,fe)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.invMassSolve,o=s.invMassSolve,r=i.invInertiaWorldSolve,a=s.invInertiaWorldSolve;let l=n+o;return r.vmult(t.rotational,Ae),l+=Ae.dot(t.rotational),a.vmult(e.rotational,Ae),l+=Ae.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,i=this.jacobianElementB,s=this.bi,n=this.bj,o=ge;s.vlambda.addScaledVector(s.invMassSolve*t,e.spatial,s.vlambda),n.vlambda.addScaledVector(n.invMassSolve*t,i.spatial,n.vlambda),s.invInertiaWorldSolve.vmult(e.rotational,o),s.wlambda.addScaledVector(t,o,s.wlambda),n.invInertiaWorldSolve.vmult(i.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}ye.idCounter=0;const ve=new R,we=new R,me=new R,fe=new R,Ae=new R,ge=new R;class xe extends ye{constructor(t,e,i){void 0===i&&(i=1e6),super(t,e,0,i),this.restitution=0,this.ri=new R,this.rj=new R,this.ni=new R}computeB(t){const e=this.a,i=this.b,s=this.bi,n=this.bj,o=this.ri,r=this.rj,a=be,l=qe,h=s.velocity,c=s.angularVelocity;s.force,s.torque;const d=n.velocity,u=n.angularVelocity;n.force,n.torque;const p=Ee,y=this.jacobianElementA,v=this.jacobianElementB,w=this.ni;o.cross(w,a),r.cross(w,l),w.negate(y.spatial),a.negate(y.rotational),v.spatial.copy(w),v.rotational.copy(l),p.copy(n.position),p.vadd(r,p),p.vsub(s.position,p),p.vsub(o,p);const m=w.dot(p),f=this.restitution+1;return-m*e-(f*d.dot(w)-f*h.dot(w)+u.dot(l)-c.dot(a))*i-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=ze,e=Se,i=Be,s=Me,n=Ce;return this.bi.position.vadd(this.ri,i),this.bj.position.vadd(this.rj,s),this.bi.getVelocityAtWorldPoint(i,t),this.bj.getVelocityAtWorldPoint(s,e),t.vsub(e,n),this.ni.dot(n)}}const be=new R,qe=new R,Ee=new R,ze=new R,Se=new R,Be=new R,Me=new R,Ce=new R;new R,new R,new R,new R,new R,new R,new R,new R,new R,new R;class Re extends ye{constructor(t,e,i){super(t,e,-i,i),this.ri=new R,this.rj=new R,this.t=new R}computeB(t){this.a;const e=this.b;this.bi,this.bj;const i=this.ri,s=this.rj,n=Fe,o=Ne,r=this.t;i.cross(r,n),s.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;return r.negate(a.spatial),n.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o),-this.computeGW()*e-t*this.computeGiMf()}}const Fe=new R,Ne=new R;class Ie{constructor(t,e,i){i=ue.defaults(i,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Ie.idCounter++,this.materials=[t,e],this.friction=i.friction,this.restitution=i.restitution,this.contactEquationStiffness=i.contactEquationStiffness,this.contactEquationRelaxation=i.contactEquationRelaxation,this.frictionEquationStiffness=i.frictionEquationStiffness,this.frictionEquationRelaxation=i.frictionEquationRelaxation}}Ie.idCounter=0;class Le{constructor(t){void 0===t&&(t={});let e="";"string"==typeof t&&(e=t,t={}),this.name=e,this.id=Le.idCounter++,this.friction=void 0!==t.friction?t.friction:-1,this.restitution=void 0!==t.restitution?t.restitution:-1}}Le.idCounter=0,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new Tt,new R,new R,new R,new R(1,0,0),new R(0,1,0),new R(0,0,1),new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new R;class Pe extends U{constructor(t){if(super({type:U.types.SPHERE}),this.radius=void 0!==t?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){void 0===e&&(e=new R);const i=2*t*this.radius*this.radius/5;return e.x=i,e.y=i,e.z=i,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,i,s){const n=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const e=o[r];i[e]=t[e]-n,s[e]=t[e]+n}}}new R,new R,new R,new R,new R,new R,new R,new R,new R;class Te extends U{constructor(){super({type:U.types.PLANE}),this.worldNormal=new R,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return void 0===e&&(e=new R),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,i,s){je.set(0,0,1),e.vmult(je,je);const n=Number.MAX_VALUE;i.set(-n,-n,-n),s.set(n,n,n),1===je.x?s.x=t.x:-1===je.x&&(i.x=t.x),1===je.y?s.y=t.y:-1===je.y&&(i.y=t.y),1===je.z?s.z=t.z:-1===je.z&&(i.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const je=new R;new R,new R,new R,new R,new R,new R,new R,new R,new R,new R,new L,new R,new L,new R,new R,new R,new R,new R,new R,new R,new L,new R,new H,new L;class We{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){!t.enabled||t.bi.isTrigger||t.bj.isTrigger||this.equations.push(t)}removeEquation(t){const e=this.equations,i=e.indexOf(t);-1!==i&&e.splice(i,1)}removeAllEquations(){this.equations.length=0}}class Oe extends We{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let i=0;const s=this.iterations,n=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,h=t;let c,d,u,p,y,v;if(0!==r)for(let A=0;A!==l;A++)a[A].updateSolveMassProperties();const w=Ve,m=Ue,f=ke;w.length=r,m.length=r,f.length=r;for(let A=0;A!==r;A++){const t=o[A];f[A]=0,m[A]=t.computeB(h),w[A]=1/t.computeC()}if(0!==r){for(let i=0;i!==l;i++){const t=a[i],e=t.vlambda,s=t.wlambda;e.set(0,0,0),s.set(0,0,0)}for(i=0;i!==s;i++){p=0;for(let t=0;t!==r;t++){const e=o[t];c=m[t],d=w[t],v=f[t],y=e.computeGWlambda(),u=d*(c-y-e.eps*v),v+u<e.minForce?u=e.minForce-v:v+u>e.maxForce&&(u=e.maxForce-v),f[t]+=u,p+=u>0?u:-u,e.addToWlambda(u)}if(p*p<n)break}for(let i=0;i!==l;i++){const t=a[i],e=t.velocity,s=t.angularVelocity;t.vlambda.vmul(t.linearFactor,t.vlambda),e.vadd(t.vlambda,e),t.wlambda.vmul(t.angularFactor,t.wlambda),s.vadd(t.wlambda,s)}let t=o.length;const e=1/h;for(;t--;)o[t].multiplier=f[t]*e}return i}}const ke=[],Ve=[],Ue=[];ot.STATIC;class He{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class De extends He{constructor(){super(...arguments),this.type=R}constructObject(){return new R}}const Ge=U.types.SPHERE,Ye=U.types.SPHERE|U.types.PLANE,Xe=U.types.BOX|U.types.BOX,_e=U.types.SPHERE|U.types.BOX,Ke=U.types.PLANE|U.types.BOX,Ze=U.types.CONVEXPOLYHEDRON,Qe=U.types.SPHERE|U.types.CONVEXPOLYHEDRON,$e=U.types.PLANE|U.types.CONVEXPOLYHEDRON,Je=U.types.BOX|U.types.CONVEXPOLYHEDRON,ti=U.types.SPHERE|U.types.HEIGHTFIELD,ei=U.types.BOX|U.types.HEIGHTFIELD,ii=U.types.CONVEXPOLYHEDRON|U.types.HEIGHTFIELD,si=U.types.PARTICLE|U.types.SPHERE,ni=U.types.PLANE|U.types.PARTICLE,oi=U.types.BOX|U.types.PARTICLE,ri=U.types.PARTICLE|U.types.CONVEXPOLYHEDRON,ai=U.types.CYLINDER,li=U.types.SPHERE|U.types.CYLINDER,hi=U.types.PLANE|U.types.CYLINDER,ci=U.types.BOX|U.types.CYLINDER,di=U.types.CONVEXPOLYHEDRON|U.types.CYLINDER,ui=U.types.HEIGHTFIELD|U.types.CYLINDER,pi=U.types.PARTICLE|U.types.CYLINDER,yi=U.types.SPHERE|U.types.TRIMESH,vi=U.types.PLANE|U.types.TRIMESH;class wi{get[Ge](){return this.sphereSphere}get[Ye](){return this.spherePlane}get[Xe](){return this.boxBox}get[_e](){return this.sphereBox}get[Ke](){return this.planeBox}get[Ze](){return this.convexConvex}get[Qe](){return this.sphereConvex}get[$e](){return this.planeConvex}get[Je](){return this.boxConvex}get[ti](){return this.sphereHeightfield}get[ei](){return this.boxHeightfield}get[ii](){return this.convexHeightfield}get[si](){return this.sphereParticle}get[ni](){return this.planeParticle}get[oi](){return this.boxParticle}get[ri](){return this.convexParticle}get[ai](){return this.convexConvex}get[li](){return this.sphereConvex}get[hi](){return this.planeConvex}get[ci](){return this.boxConvex}get[di](){return this.convexConvex}get[ui](){return this.heightfieldCylinder}get[pi](){return this.particleCylinder}get[yi](){return this.sphereTrimesh}get[vi](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new De,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,i,s,n,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new xe(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&i.collisionResponse&&s.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=i.material||t.material,h=s.material||e.material;return l&&h&&l.restitution>=0&&h.restitution>=0&&(r.restitution=l.restitution*h.restitution),r.si=n||i,r.sj=o||s,r}createFrictionEquationsFromContact(t,e){const i=t.bi,s=t.bj,n=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const h=n.material||i.material,c=o.material||s.material;if(h&&c&&h.friction>=0&&c.friction>=0&&(l=h.friction*c.friction),l>0){const n=l*(r.frictionGravity||r.gravity).length();let o=i.invMass+s.invMass;o>0&&(o=1/o);const h=this.frictionEquationPool,c=h.length?h.pop():new Re(i,s,n*o),d=h.length?h.pop():new Re(i,s,n*o);return c.bi=d.bi=i,c.bj=d.bj=s,c.minForce=d.minForce=-n*o,c.maxForce=d.maxForce=n*o,c.ri.copy(t.ri),c.rj.copy(t.rj),d.ri.copy(t.ri),d.rj.copy(t.rj),t.ni.tangents(c.t,d.t),c.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),d.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),c.enabled=d.enabled=t.enabled,e.push(c,d),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const i=this.frictionResult[this.frictionResult.length-2],s=this.frictionResult[this.frictionResult.length-1];mi.setZero(),fi.setZero(),Ai.setZero();const n=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==n?(mi.vadd(e.ni,mi),fi.vadd(e.ri,fi),Ai.vadd(e.rj,Ai)):(mi.vsub(e.ni,mi),fi.vadd(e.rj,fi),Ai.vadd(e.ri,Ai));const o=1/t;fi.scale(o,i.ri),Ai.scale(o,i.rj),s.ri.copy(i.ri),s.rj.copy(i.rj),mi.normalize(),mi.tangents(i.t,s.t)}getContacts(t,e,i,s,n,o,r){this.contactPointPool=n,this.frictionEquationPool=r,this.result=s,this.frictionResult=o;const a=bi,l=qi,h=gi,c=xi;for(let d=0,u=t.length;d!==u;d++){const s=t[d],n=e[d];let o=null;s.material&&n.material&&(o=i.getContactMaterial(s.material,n.material)||null);const r=s.type&ot.KINEMATIC&&n.type&ot.STATIC||s.type&ot.STATIC&&n.type&ot.KINEMATIC||s.type&ot.KINEMATIC&&n.type&ot.KINEMATIC;for(let t=0;t<s.shapes.length;t++){s.quaternion.mult(s.shapeOrientations[t],a),s.quaternion.vmult(s.shapeOffsets[t],h),h.vadd(s.position,h);const e=s.shapes[t];for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],l),n.quaternion.vmult(n.shapeOffsets[t],c),c.vadd(n.position,c);const d=n.shapes[t];if(!(e.collisionFilterMask&d.collisionFilterGroup&&d.collisionFilterMask&e.collisionFilterGroup))continue;if(h.distanceTo(c)>e.boundingSphereRadius+d.boundingSphereRadius)continue;let u=null;e.material&&d.material&&(u=i.getContactMaterial(e.material,d.material)||null),this.currentContactMaterial=u||o||i.defaultContactMaterial;const p=this[e.type|d.type];if(p){let t=!1;t=e.type<d.type?p.call(this,e,d,h,c,a,l,s,n,e,d,r):p.call(this,d,e,c,h,l,a,n,s,e,d,r),t&&r&&(i.shapeOverlapKeeper.set(e.id,d.id),i.bodyOverlapKeeper.set(s.id,n.id))}}}}}sphereSphere(t,e,i,s,n,o,r,a,l,h,c){if(c)return i.distanceSquared(s)<(t.radius+e.radius)**2;const d=this.createContactEquation(r,a,t,e,l,h);s.vsub(i,d.ni),d.ni.normalize(),d.ri.copy(d.ni),d.rj.copy(d.ni),d.ri.scale(t.radius,d.ri),d.rj.scale(-e.radius,d.rj),d.ri.vadd(i,d.ri),d.ri.vsub(r.position,d.ri),d.rj.vadd(s,d.rj),d.rj.vsub(a.position,d.rj),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}spherePlane(t,e,i,s,n,o,r,a,l,h,c){const d=this.createContactEquation(r,a,t,e,l,h);if(d.ni.set(0,0,1),o.vmult(d.ni,d.ni),d.ni.negate(d.ni),d.ni.normalize(),d.ni.scale(t.radius,d.ri),i.vsub(s,Ui),d.ni.scale(d.ni.dot(Ui),Hi),Ui.vsub(Hi,d.rj),-Ui.dot(d.ni)<=t.radius){if(c)return!0;const t=d.ri,e=d.rj;t.vadd(i,t),t.vsub(r.position,t),e.vadd(s,e),e.vsub(a.position,e),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}}boxBox(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,i,s,n,o,r,a,t,e,c)}sphereBox(t,e,i,s,n,o,r,a,l,h,c){const d=this.v3pool,u=$i;i.vsub(s,_i),e.getSideNormals(u,o);const p=t.radius;let y=!1;const v=ts,w=es,m=is;let f=null,A=0,g=0,x=0,b=null;for(let F=0,N=u.length;F!==N&&!1===y;F++){const t=Ki;t.copy(u[F]);const e=t.length();t.normalize();const i=_i.dot(t);if(i<e+p&&i>0){const s=Zi,n=Qi;s.copy(u[(F+1)%3]),n.copy(u[(F+2)%3]);const o=s.length(),r=n.length();s.normalize(),n.normalize();const a=_i.dot(s),l=_i.dot(n);if(a<o&&a>-o&&l<r&&l>-r){const o=Math.abs(i-e-p);if((null===b||o<b)&&(b=o,g=a,x=l,f=e,v.copy(t),w.copy(s),m.copy(n),A++,c))return!0}}}if(A){y=!0;const n=this.createContactEquation(r,a,t,e,l,h);v.scale(-p,n.ri),n.ni.copy(v),n.ni.negate(n.ni),v.scale(f,v),w.scale(g,w),v.vadd(w,v),m.scale(x,m),v.vadd(m,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}let q=d.get();const E=Ji;for(let F=0;2!==F&&!y;F++)for(let n=0;2!==n&&!y;n++)for(let o=0;2!==o&&!y;o++)if(q.set(0,0,0),F?q.vadd(u[0],q):q.vsub(u[0],q),n?q.vadd(u[1],q):q.vsub(u[1],q),o?q.vadd(u[2],q):q.vsub(u[2],q),s.vadd(q,E),E.vsub(i,E),E.lengthSquared()<p*p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);n.ri.copy(E),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(p,n.ri),n.rj.copy(q),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}d.release(q),q=null;const z=d.get(),S=d.get(),B=d.get(),M=d.get(),C=d.get(),R=u.length;for(let F=0;F!==R&&!y;F++)for(let n=0;n!==R&&!y;n++)if(F%3!=n%3){u[n].cross(u[F],z),z.normalize(),u[F].vadd(u[n],S),B.copy(i),B.vsub(S,B),B.vsub(s,B);const o=B.dot(z);z.scale(o,M);let d=0;for(;d===F%3||d===n%3;)d++;C.copy(i),C.vsub(M,C),C.vsub(S,C),C.vsub(s,C);const v=Math.abs(o),w=C.length();if(v<u[d].length()&&w<p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);S.vadd(M,n.rj),n.rj.copy(n.rj),C.negate(n.ni),n.ni.normalize(),n.ri.copy(n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(i,n.ri),n.ri.normalize(),n.ri.scale(p,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}d.release(z,S,B,M,C)}planeBox(t,e,i,s,n,o,r,a,l,h,c){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,i,s,n,o,r,a,t,e,c)}convexConvex(t,e,i,s,n,o,r,a,l,h,c,d,u){const p=ms;if(!(i.distanceTo(s)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,i,n,s,o,p,d,u)){const d=[],u=fs;t.clipAgainstHull(i,n,e,s,o,p,-100,100,d);let y=0;for(let n=0;n!==d.length;n++){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h),v=o.ri,w=o.rj;p.negate(o.ni),d[n].normal.negate(u),u.scale(d[n].depth,u),d[n].point.vadd(u,v),w.copy(d[n].point),v.vsub(i,v),w.vsub(s,w),v.vadd(i,v),v.vsub(r.position,v),w.vadd(s,w),w.vsub(a.position,w),this.result.push(o),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,i,s,n,o,r,a,l,h,c){const d=this.v3pool;i.vsub(s,ss);const u=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let w=!1;for(let m=0;m!==y.length;m++){const n=y[m],d=as;o.vmult(n,d),s.vadd(d,d);const u=rs;if(d.vsub(i,u),u.lengthSquared()<v*v){if(c)return!0;w=!0;const n=this.createContactEquation(r,a,t,e,l,h);return n.ri.copy(u),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(v,n.ri),d.vsub(s,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),void this.createFrictionEquationsFromContact(n,this.frictionResult)}}for(let m=0,f=p.length;m!==f&&!1===w;m++){const n=u[m],f=p[m],A=ls;o.vmult(n,A);const g=hs;o.vmult(y[f[0]],g),g.vadd(s,g);const x=cs;A.scale(-v,x),i.vadd(x,x);const b=ds;x.vsub(g,b);const q=b.dot(A),E=us;if(i.vsub(g,E),q<0&&E.dot(A)>0){const n=[];for(let t=0,e=f.length;t!==e;t++){const e=d.get();o.vmult(y[f[t]],e),s.vadd(e,e),n.push(e)}if(Xi(n,A,i)){if(c)return!0;w=!0;const o=this.createContactEquation(r,a,t,e,l,h);A.scale(-v,o.ri),A.negate(o.ni);const u=d.get();A.scale(-q,u);const p=d.get();A.scale(-v,p),i.vsub(s,o.rj),o.rj.vadd(p,o.rj),o.rj.vadd(u,o.rj),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),d.release(u),d.release(p),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)d.release(n[t]);return}for(let u=0;u!==f.length;u++){const p=d.get(),w=d.get();o.vmult(y[f[(u+1)%f.length]],p),o.vmult(y[f[(u+2)%f.length]],w),s.vadd(p,p),s.vadd(w,w);const m=ns;w.vsub(p,m);const A=os;m.unit(A);const g=d.get(),x=d.get();i.vsub(p,x);const b=x.dot(A);A.scale(b,g),g.vadd(p,g);const q=d.get();if(g.vsub(i,q),b>0&&b*b<m.lengthSquared()&&q.lengthSquared()<v*v){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h);g.vsub(s,o.rj),g.vsub(i,o.ni),o.ni.normalize(),o.ni.scale(v,o.ri),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)d.release(n[t]);return d.release(p),d.release(w),d.release(g),d.release(q),void d.release(x)}d.release(p),d.release(w),d.release(g),d.release(q),d.release(x)}for(let t=0,e=n.length;t!==e;t++)d.release(n[t])}}}planeConvex(t,e,i,s,n,o,r,a,l,h,c){const d=ps,u=ys;u.set(0,0,1),n.vmult(u,u);let p=0;const y=vs;for(let v=0;v!==e.vertices.length;v++)if(d.copy(e.vertices[v]),o.vmult(d,d),s.vadd(d,d),d.vsub(i,y),u.dot(y)<=0){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h),o=ws;u.scale(u.dot(y),o),d.vsub(o,o),o.vsub(i,n.ri),n.ni.copy(u),d.vsub(s,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}sphereHeightfield(t,e,i,s,n,o,r,a,l,h,c){const d=e.data,u=t.radius,p=e.elementSize,y=Ns,v=Fs;H.pointToLocalFrame(s,o,i,v);let w=Math.floor((v.x-u)/p)-1,m=Math.ceil((v.x+u)/p)+1,f=Math.floor((v.y-u)/p)-1,A=Math.ceil((v.y+u)/p)+1;if(m<0||A<0||w>d.length||f>d[0].length)return;w<0&&(w=0),m<0&&(m=0),f<0&&(f=0),A<0&&(A=0),w>=d.length&&(w=d.length-1),m>=d.length&&(m=d.length-1),A>=d[0].length&&(A=d[0].length-1),f>=d[0].length&&(f=d[0].length-1);const g=[];e.getRectMinMax(w,f,m,A,g);const x=g[0],b=g[1];if(v.z-u>b||v.z+u<x)return;const q=this.result;for(let E=w;E<m;E++)for(let l=f;l<A;l++){const h=q.length;let d=!1;if(e.getConvexTrianglePillar(E,l,!1),H.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,i,y,n,o,r,a,t,e,c)),c&&d)return!0;if(e.getConvexTrianglePillar(E,l,!0),H.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,i,y,n,o,r,a,t,e,c)),c&&d)return!0;if(q.length-h>2)return}}boxHeightfield(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}convexHeightfield(t,e,i,s,n,o,r,a,l,h,c){const d=e.data,u=e.elementSize,p=t.boundingSphereRadius,y=Cs,v=Rs,w=Ms;H.pointToLocalFrame(s,o,i,w);let m=Math.floor((w.x-p)/u)-1,f=Math.ceil((w.x+p)/u)+1,A=Math.floor((w.y-p)/u)-1,g=Math.ceil((w.y+p)/u)+1;if(f<0||g<0||m>d.length||A>d[0].length)return;m<0&&(m=0),f<0&&(f=0),A<0&&(A=0),g<0&&(g=0),m>=d.length&&(m=d.length-1),f>=d.length&&(f=d.length-1),g>=d[0].length&&(g=d[0].length-1),A>=d[0].length&&(A=d[0].length-1);const x=[];e.getRectMinMax(m,A,f,g,x);const b=x[0],q=x[1];if(!(w.z-p>q||w.z+p<b))for(let E=m;E<f;E++)for(let l=A;l<g;l++){let h=!1;if(e.getConvexTrianglePillar(E,l,!1),H.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(h=this.convexConvex(t,e.pillarConvex,i,y,n,o,r,a,null,null,c,v,null)),c&&h)return!0;if(e.getConvexTrianglePillar(E,l,!0),H.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(h=this.convexConvex(t,e.pillarConvex,i,y,n,o,r,a,null,null,c,v,null)),c&&h)return!0}}sphereParticle(t,e,i,s,n,o,r,a,l,h,c){const d=bs;if(d.set(0,0,1),s.vsub(i,d),d.lengthSquared()<=t.radius*t.radius){if(c)return!0;const i=this.createContactEquation(a,r,e,t,l,h);d.normalize(),i.rj.copy(d),i.rj.scale(t.radius,i.rj),i.ni.copy(d),i.ni.negate(i.ni),i.ri.set(0,0,0),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}planeParticle(t,e,i,s,n,o,r,a,l,h,c){const d=As;d.set(0,0,1),r.quaternion.vmult(d,d);const u=gs;if(s.vsub(r.position,u),d.dot(u)<=0){if(c)return!0;const i=this.createContactEquation(a,r,e,t,l,h);i.ni.copy(d),i.ni.negate(i.ni),i.ri.set(0,0,0);const n=xs;d.scale(d.dot(s),n),s.vsub(n,n),i.rj.copy(n),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}boxParticle(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}convexParticle(t,e,i,s,n,o,r,a,l,h,c){let d=-1;const u=zs,p=Bs;let y=null;const v=Es;if(v.copy(s),v.vsub(i,v),n.conjugate(qs),qs.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(i,n),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(n);for(let e=0,i=t.faces.length;e!==i;e++){const i=[t.worldVertices[t.faces[e][0]]],n=t.worldFaceNormals[e];s.vsub(i[0],Ss);const o=-n.dot(Ss);if(null===y||Math.abs(o)<Math.abs(y)){if(c)return!0;y=o,d=e,u.copy(n)}}if(-1!==d){const n=this.createContactEquation(a,r,e,t,l,h);u.scale(y,p),p.vadd(s,p),p.vsub(i,p),n.rj.copy(p),u.negate(n.ni),n.ri.set(0,0,0);const o=n.ri,c=n.rj;o.vadd(s,o),o.vsub(a.position,o),c.vadd(i,c),c.vsub(r.position,c),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,i,s,n,o,r,a,l,h,c){return this.convexHeightfield(e,t,s,i,o,n,a,r,l,h,c)}particleCylinder(t,e,i,s,n,o,r,a,l,h,c){return this.convexParticle(e,t,s,i,o,n,a,r,l,h,c)}sphereTrimesh(t,e,i,s,n,o,r,a,l,h,c){const d=Fi,u=Ni,p=Ii,y=Li,v=Pi,w=Ti,m=ki,f=Ri,A=Mi,g=Vi;H.pointToLocalFrame(s,o,i,v);const x=t.radius;m.lowerBound.set(v.x-x,v.y-x,v.z-x),m.upperBound.set(v.x+x,v.y+x,v.z+x),e.getTrianglesInAABB(m,g);const b=Ci,q=t.radius*t.radius;for(let M=0;M<g.length;M++)for(let n=0;n<3;n++)if(e.getVertex(e.indices[3*g[M]+n],b),b.vsub(v,A),A.lengthSquared()<=q){if(f.copy(b),H.pointToWorldFrame(s,o,f,b),b.vsub(i,A),c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);n.ni.copy(A),n.ni.normalize(),n.ri.copy(n.ni),n.ri.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.copy(b),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}for(let M=0;M<g.length;M++)for(let n=0;n<3;n++){e.getVertex(e.indices[3*g[M]+n],d),e.getVertex(e.indices[3*g[M]+(n+1)%3],u),u.vsub(d,p),v.vsub(u,w);const m=w.dot(p);v.vsub(d,w);let f=w.dot(p);if(f>0&&m<0&&(v.vsub(d,w),y.copy(p),y.normalize(),f=w.dot(y),y.scale(f,w),w.vadd(d,w),w.distanceTo(v)<t.radius)){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h);w.vsub(v,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),H.pointToWorldFrame(s,o,w,w),w.vsub(a.position,n.rj),H.vectorToWorldFrame(o,n.ni,n.ni),H.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}const E=ji,z=Wi,S=Oi,B=Bi;for(let M=0,C=g.length;M!==C;M++){e.getTriangleVertices(g[M],E,z,S),e.getNormal(g[M],B),v.vsub(E,w);let n=w.dot(B);if(B.scale(n,w),v.vsub(w,w),n=w.distanceTo(v),Tt.pointInTriangle(w,E,z,S)&&n<t.radius){if(c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);w.vsub(v,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),H.pointToWorldFrame(s,o,w,w),w.vsub(a.position,n.rj),H.vectorToWorldFrame(o,n.ni,n.ni),H.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}g.length=0}planeTrimesh(t,e,i,s,n,o,r,a,l,h,c){const d=new R,u=Ei;u.set(0,0,1),n.vmult(u,u);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,d);const n=new R;n.copy(d),H.pointToWorldFrame(s,o,n,d);const y=zi;if(d.vsub(i,y),u.dot(y)<=0){if(c)return!0;const i=this.createContactEquation(r,a,t,e,l,h);i.ni.copy(u);const s=Si;u.scale(y.dot(u),s),d.vsub(s,s),i.ri.copy(s),i.ri.vsub(r.position,i.ri),i.rj.copy(d),i.rj.vsub(a.position,i.rj),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}}}const mi=new R,fi=new R,Ai=new R,gi=new R,xi=new R,bi=new O,qi=new O,Ei=new R,zi=new R,Si=new R,Bi=new R,Mi=new R;new R;const Ci=new R,Ri=new R,Fi=new R,Ni=new R,Ii=new R,Li=new R,Pi=new R,Ti=new R,ji=new R,Wi=new R,Oi=new R,ki=new L,Vi=[],Ui=new R,Hi=new R,Di=new R,Gi=new R,Yi=new R;function Xi(t,e,i){let s=null;const n=t.length;for(let o=0;o!==n;o++){const r=t[o],a=Di;t[(o+1)%n].vsub(r,a);const l=Gi;a.cross(e,l);const h=Yi;i.vsub(r,h);const c=l.dot(h);if(!(null===s||c>0&&!0===s||c<=0&&!1===s))return!1;null===s&&(s=c>0)}return!0}const _i=new R,Ki=new R,Zi=new R,Qi=new R,$i=[new R,new R,new R,new R,new R,new R],Ji=new R,ts=new R,es=new R,is=new R,ss=new R,ns=new R,os=new R,rs=new R,as=new R,ls=new R,hs=new R,cs=new R,ds=new R,us=new R;new R,new R;const ps=new R,ys=new R,vs=new R,ws=new R,ms=new R,fs=new R,As=new R,gs=new R,xs=new R,bs=new R,qs=new O,Es=new R;new R;const zs=new R,Ss=new R,Bs=new R,Ms=new R,Cs=new R,Rs=[0],Fs=new R,Ns=new R;class Is{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const i=e;e=t,t=i}return t<<16|e}set(t,e){const i=this.getKey(t,e),s=this.current;let n=0;for(;i>s[n];)n++;if(i!==s[n]){for(let t=s.length-1;t>=n;t--)s[t+1]=s[t];s[n]=i}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const i=this.current,s=this.previous,n=i.length,o=s.length;let r=0;for(let a=0;a<n;a++){let e=!1;const n=i[a];for(;n>s[r];)r++;e=n===s[r],e||Ls(t,n)}r=0;for(let a=0;a<o;a++){let t=!1;const n=s[a];for(;n>i[r];)r++;t=i[r]===n,t||Ls(e,n)}}}function Ls(t,e){t.push((4294901760&e)>>16,65535&e)}const Ps=(t,e)=>t<e?`${t}-${e}`:`${e}-${t}`;class Ts{constructor(){this.data={keys:[]}}get(t,e){const i=Ps(t,e);return this.data[i]}set(t,e,i){const s=Ps(t,e);this.get(t,e)||this.data.keys.push(s),this.data[s]=i}delete(t,e){const i=Ps(t,e),s=this.data.keys.indexOf(i);-1!==s&&this.data.keys.splice(s,1),delete this.data[i]}reset(){const t=this.data,e=t.keys;for(;e.length>0;)delete t[e.pop()]}}class js extends W{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new R,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new R,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=void 0!==t.broadphase?t.broadphase:new Et,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new Oe,this.constraints=[],this.narrowphase=new wi(this),this.collisionMatrix=new j,this.collisionMatrixPrevious=new j,this.bodyOverlapKeeper=new Is,this.shapeOverlapKeeper=new Is,this.contactmaterials=[],this.contactMaterialTable=new Ts,this.defaultMaterial=new Le("default"),this.defaultContactMaterial=new Ie(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,i){i instanceof zt?this.raycastClosest(t,e,{skipBackfaces:!0},i):this.raycastAll(t,e,{skipBackfaces:!0},i)}raycastAll(t,e,i,s){return void 0===i&&(i={}),i.mode=Tt.ALL,i.from=t,i.to=e,i.callback=s,Ws.intersectWorld(this,i)}raycastAny(t,e,i,s){return void 0===i&&(i={}),i.mode=Tt.ANY,i.from=t,i.to=e,i.result=s,Ws.intersectWorld(this,i)}raycastClosest(t,e,i,s){return void 0===i&&(i={}),i.mode=Tt.CLOSEST,i.from=t,i.to=e,i.result=s,Ws.intersectWorld(this,i)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof ot&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,i=this.bodies,s=i.indexOf(t);if(-1!==s){i.splice(s,1);for(let t=0;t!==i.length;t++)i[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let i=0;i<e.length;i++){const s=e[i].shapes;for(let e=0;e<s.length;e++){const i=s[e];if(i.id===t)return i}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const i=Os.now()/1e3;if(this.lastCallTime){const s=i-this.lastCallTime;this.step(t,s,e)}else this.step(t,void 0,e);this.lastCallTime=i}step(t,e,i){if(void 0===i&&(i=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const s=Os.now();let n=0;for(;this.accumulator>=t&&n<i&&(this.internalStep(t),this.accumulator-=t,n++,!(Os.now()-s>1e3*t)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,o,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,o,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,i=Gs,s=Ys,n=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,h=this.profile,c=ot.DYNAMIC;let d=-1/0;const u=this.constraints,p=Ds;a.length();const y=a.x,v=a.y,w=a.z;let m=0;for(l&&(d=Os.now()),m=0;m!==n;m++){const t=o[m];if(t.type===c){const e=t.force,i=t.mass;e.x+=i*y,e.y+=i*v,e.z+=i*w}}for(let B=0,M=this.subsystems.length;B!==M;B++)this.subsystems[B].update();l&&(d=Os.now()),i.length=0,s.length=0,this.broadphase.collisionPairs(this,i,s),l&&(h.broadphase=Os.now()-d);let f=u.length;for(m=0;m!==f;m++){const t=u[m];if(!t.collideConnected)for(let e=i.length-1;e>=0;e-=1)(t.bodyA===i[e]&&t.bodyB===s[e]||t.bodyB===i[e]&&t.bodyA===s[e])&&(i.splice(e,1),s.splice(e,1))}this.collisionMatrixTick(),l&&(d=Os.now());const A=Hs,g=e.length;for(m=0;m!==g;m++)A.push(e[m]);e.length=0;const x=this.frictionEquations.length;for(m=0;m!==x;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(i,s,this,e,A,this.frictionEquations,p),l&&(h.narrowphase=Os.now()-d),l&&(d=Os.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const b=e.length;for(let B=0;B!==b;B++){const t=e[B],i=t.bi,s=t.bj,n=t.si,o=t.sj;let a;a=i.material&&s.material&&this.getContactMaterial(i.material,s.material)||this.defaultContactMaterial,a.friction,i.material&&s.material&&(i.material.friction>=0&&s.material.friction>=0&&(i.material.friction,s.material.friction),i.material.restitution>=0&&s.material.restitution>=0&&(t.restitution=i.material.restitution*s.material.restitution)),r.addEquation(t),i.allowSleep&&i.type===ot.DYNAMIC&&i.sleepState===ot.SLEEPING&&s.sleepState===ot.AWAKE&&s.type!==ot.STATIC&&s.velocity.lengthSquared()+s.angularVelocity.lengthSquared()>=2*s.sleepSpeedLimit**2&&(i.wakeUpAfterNarrowphase=!0),s.allowSleep&&s.type===ot.DYNAMIC&&s.sleepState===ot.SLEEPING&&i.sleepState===ot.AWAKE&&i.type!==ot.STATIC&&i.velocity.lengthSquared()+i.angularVelocity.lengthSquared()>=2*i.sleepSpeedLimit**2&&(s.wakeUpAfterNarrowphase=!0),this.collisionMatrix.set(i,s,!0),this.collisionMatrixPrevious.get(i,s)||(Us.body=s,Us.contact=t,i.dispatchEvent(Us),Us.body=i,s.dispatchEvent(Us)),this.bodyOverlapKeeper.set(i.id,s.id),this.shapeOverlapKeeper.set(n.id,o.id)}for(this.emitContactEvents(),l&&(h.makeContactConstraints=Os.now()-d,d=Os.now()),m=0;m!==n;m++){const t=o[m];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(f=u.length,m=0;m!==f;m++){const t=u[m];t.update();for(let e=0,i=t.equations.length;e!==i;e++){const i=t.equations[e];r.addEquation(i)}}r.solve(t,this),l&&(h.solve=Os.now()-d),r.removeAllEquations();const q=Math.pow;for(m=0;m!==n;m++){const e=o[m];if(e.type&c){const i=q(1-e.linearDamping,t),s=e.velocity;s.scale(i,s);const n=e.angularVelocity;if(n){const i=q(1-e.angularDamping,t);n.scale(i,n)}}}this.dispatchEvent(Vs),l&&(d=Os.now());const E=this.stepnumber%(this.quatNormalizeSkip+1)==0,z=this.quatNormalizeFast;for(m=0;m!==n;m++)o[m].integrate(t,E,z);this.clearForces(),this.broadphase.dirty=!0,l&&(h.integrate=Os.now()-d),this.stepnumber+=1,this.dispatchEvent(ks);let S=!0;if(this.allowSleep)for(S=!1,m=0;m!==n;m++){const t=o[m];t.sleepTick(this.time),t.sleepState!==ot.SLEEPING&&(S=!0)}this.hasActiveBodies=S}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(Xs,_s),t){for(let t=0,e=Xs.length;t<e;t+=2)Ks.bodyA=this.getBodyById(Xs[t]),Ks.bodyB=this.getBodyById(Xs[t+1]),this.dispatchEvent(Ks);Ks.bodyA=Ks.bodyB=null}if(e){for(let t=0,e=_s.length;t<e;t+=2)Zs.bodyA=this.getBodyById(_s[t]),Zs.bodyB=this.getBodyById(_s[t+1]),this.dispatchEvent(Zs);Zs.bodyA=Zs.bodyB=null}Xs.length=_s.length=0;const i=this.hasAnyEventListener("beginShapeContact"),s=this.hasAnyEventListener("endShapeContact");if((i||s)&&this.shapeOverlapKeeper.getDiff(Xs,_s),i){for(let t=0,e=Xs.length;t<e;t+=2){const e=this.getShapeById(Xs[t]),i=this.getShapeById(Xs[t+1]);Qs.shapeA=e,Qs.shapeB=i,e&&(Qs.bodyA=e.body),i&&(Qs.bodyB=i.body),this.dispatchEvent(Qs)}Qs.bodyA=Qs.bodyB=Qs.shapeA=Qs.shapeB=null}if(s){for(let t=0,e=_s.length;t<e;t+=2){const e=this.getShapeById(_s[t]),i=this.getShapeById(_s[t+1]);$s.shapeA=e,$s.shapeB=i,e&&($s.bodyA=e.body),i&&($s.bodyB=i.body),this.dispatchEvent($s)}$s.bodyA=$s.bodyB=$s.shapeA=$s.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let i=0;i!==e;i++){const e=t[i];e.force,e.torque,e.force.set(0,0,0),e.torque.set(0,0,0)}}}new L;const Ws=new Tt,Os=globalThis.performance||{};if(!Os.now){let t=Date.now();Os.timing&&Os.timing.navigationStart&&(t=Os.timing.navigationStart),Os.now=()=>Date.now()-t}new R;const ks={type:"postStep"},Vs={type:"preStep"},Us={type:ot.COLLIDE_EVENT_NAME,body:null,contact:null},Hs=[],Ds=[],Gs=[],Ys=[],Xs=[],_s=[],Ks={type:"beginContact",bodyA:null,bodyB:null},Zs={type:"endContact",bodyA:null,bodyB:null},Qs={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},$s={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},Js={class:"webgl"};t("default",{__name:"physics",setup(t){let M={},C=null;return E((()=>{M.destroy(),C.pause()})),z((()=>{const t=new s,E=new i;M=E;const z={envMapIntensity:3},S={width:window.innerWidth,height:window.innerHeight},B=new n("#ffffff",2);B.castShadow=!0,B.shadow.mapSize.set(1024,1024),B.shadow.camera.far=15,B.shadow.normalBias=.05,B.shadow.camera.left=-7,B.shadow.camera.top=7,B.shadow.camera.right=7,B.shadow.camera.bottom=-7,B.shadow.mapSize.set(1024,1024),B.position.set(5,1,2.25),t.add(B),E.add(B,"intensity").min(0).max(10).step(.001).name("lightIntensity"),E.add(B.position,"x").min(-5).max(5).step(.001).name("lightX"),E.add(B.position,"y").min(-5).max(5).step(.001).name("lightY"),E.add(B.position,"z").min(-5).max(5).step(.001).name("lightZ");const F=new URL(""+new URL("px.a0e41bf9.jpg",e.meta.url).href,self.location).href,N=new URL(""+new URL("nx.57f73ba7.jpg",e.meta.url).href,self.location).href,I=new URL(""+new URL("py.7322f97e.jpg",e.meta.url).href,self.location).href,L=new URL(""+new URL("ny.d209a134.jpg",e.meta.url).href,self.location).href,P=new URL(""+new URL("pz.b0eb9498.jpg",e.meta.url).href,self.location).href,T=new URL(""+new URL("nz.fc946930.jpg",e.meta.url).href,self.location).href,j=(new o).load([F,N,I,L,P,T]);j.encoding=r,t.background=j;const W=()=>{t.traverse((t=>{t instanceof l&&t.material instanceof c&&(t.material.envMap=j,t.material.envMapIntensity=z.envMapIntensity,t.castShadow=!0,t.receiveShadow=!0)}))};E.add(z,"envMapIntensity").min(0).max(10).step(.001).onChange(W);const O=new js;O.broadphase=new de(O),O.allowSleep=!0,O.gravity.set(0,-10.82,0);const k=new Le("concrete"),V=new Le("plastic"),U=new Le("default"),H=new Ie(U,U,{friction:.1,restitution:.7}),D=new Ie(k,V,{friction:.1,resitution:.7});O.addContactMaterial(D),O.addContactMaterial(H),O.defaultContactMaterial=H;const G=new Te,Y=new ot;Y.mass=0,Y.addShape(G),Y.quaternion.setFromAxisAngle(new R(-1,0,0),.5*Math.PI),O.addBody(Y);const X=new URL(""+new URL("JadeToad.ae1f4d15.glb",e.meta.url).href,self.location).href;(new q).load(X,(e=>{e.scene.position.y=2.1,e.scene.position.x=-12,e.scene.scale.set(.1,.1,.1),t.add(e.scene),E.add(e.scene.rotation,"y").min(-Math.PI).max(Math.PI).step(.001).name("rotation"),W()}));const _=new URL(""+new URL("sttt.6b69edf7.glb",e.meta.url).href,self.location).href;(new q).load(_,(e=>{e.scene.position.x=14,e.scene.position.y=.7,t.add(e.scene),W()}));const K=new a(75,S.width/S.height,.1,100);K.position.set(3,3,5),t.add(K);const Q=new l(new h(30,30),new c({color:"#777777",metalness:.3,roughness:.4,envMap:j,envMapIntensity:.5,side:d}));Q.receiveShadow=!0,Q.rotation.x=.5*-Math.PI,t.add(Q);const $=new URL("data:audio/mpeg;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//uUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAAEgACqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//////////////////////////////////////////////////////////////////8AAAAATGF2YzU4LjU3AAAAAAAAAAAAAAAAJAPBAAAAAAAABIAN7TQ9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//uUZAAAAsgWTZVpgAAyYXnCp4wAD4z5V1mXgAEGjqnDMPAAAADYWX0MQSMwcM0WMcEVAFR5pVpzoxukgcJMihNSnM+TDg8ASEAQfDsSz9IIA6JwAACEyq9evuvWLKavOz9eBwfB8Hz4P8ufiCCHKO/lDn9Yf/9eXeU+GOoN28TiGKCKf4t4assZuAO4Ksl7tgQxQPNRAgAABgoD5QEOfoqBCU/1n/5Tw///UCH/w+AAAgAE5dbtnLINQ9Bml5vrclx4AG5+QAI2KoNiIVDHDRVYBK6wjpfkaW6MnCflKxn9Gdnk3WnhLGfNuWZL2dRoEHvP4vi224Ya1E40jWezam1/ve5n7+bFvEj+uqzff/+s+uL7p91x8Rsf518/4xHnqxoSD/V8+FQk0ZQlsCCs9jUujgmyMXh2IPEkm0xcbVpe+g/EgfqY05hyIpYOBysnc79d7rH3a17azWsXWPbdf4DhZARZTf8A/9/6X20KtAAIAACVWGcDeHqJ+SkcKIE2//uUZAkAAvMUzmc9gAA7Qcot55gACZQ69GGMZMjRCVvAxJhwNMCeBPKM4SfC5Kq2GTE9WxB0AEbOsxWSnub1p1a7UJAy8OlhKoKllD3sOiWVcSHmhUJFYVc0e8idyoinhLLPhUZ2NK+v8sSPLTXusX/bZAgAlZ6KFaXYxg4U0SoXInSFG8XJjVJvD1PlcrgmSM+TSJGgaDuWPYLKPFlg0VEVc787+GvWd///WFLpZIFayywGDBWWWWo5GrBQQYGBquxld+yv6K2+pYr/JgmT/S0/+itH+lK1XWK0fpLTf1itF9JaavWK0X0lpv+itF9JaavWK0X0lpqBIUkA7KHRoHxAQI2HsoiERCEFQOEYQPQuL2W/miyihIHgKFRYPGgZFBZ/rFRRt4qLfrFRakxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq",self.location).href;C=new Audio($);const J=t=>{t.contact.getImpactVelocityAlongNormal()>1.5&&(C.volume=Math.random(),C.currentTime=0,C.play())},tt=[],et=new u(1,20,20),it=new c({metalness:.3,roughness:.4,envMap:j,envMapIntensity:.5});z.createSphere=()=>{((e,i)=>{const s=new l(et,it);s.castShadow=!0,s.scale.set(e,e,e),s.position.copy(i),t.add(s);const n=new Pe(e),o=new ot({mass:1,position:new R(0,3,0),shape:n,material:U});o.position.copy(i),o.addEventListener("collide",J),O.addBody(o),tt.push({mesh:s,body:o})})(.5*Math.random(),{x:3*(Math.random()-.5),y:3,z:3*(Math.random()-.5)}),W()},E.add(z,"createSphere");const st=new p(1,1,1),nt=new c({metalness:.3,roughness:.4,envMap:j,envMapIntensity:.5}),rt=(e,i,s,n)=>{const o=new l(st,nt);o.scale.set(e,i,s),o.castShadow=!0,o.position.copy(n),t.add(o);const r=new Z(new R(.5*e,.5*i,.5*s)),a=new ot({mass:1,position:new R(0,3,0),shape:r,material:U});a.position.copy(n),a.addEventListener("collide",J),O.addBody(a),tt.push({mesh:o,body:a})};rt(1,1.5,2,{x:0,y:0,z:0}),z.createBox=()=>{rt(Math.random(),Math.random(),Math.random(),{x:3*(Math.random()-.5),y:3,z:3*(Math.random()-.5)}),W()},E.add(z,"createBox"),z.reset=()=>{for(const e of tt)e.body.removeEventListener("collide",J),O.removeBody(e.body),t.remove(e.mesh);tt.splice(0,tt.length),console.log("objectsToUpdate",tt)},E.add(z,"reset");const at=document.querySelector(".webgl"),lt=new y(K,at);lt.enableDamping=!0;const ht=new v({canvas:at,antialias:!0});ht.physicallyCorrectLights=!0,ht.outputEncoding=r,ht.toneMapping=w,ht.toneMappingExposure=1,ht.shadowMap.enable=!0,ht.shadowMap.type=m,ht.setSize(S.width,S.height),ht.setPixelRatio(Math.min(window.devicePixelRatio,2)),ht.render(t,K),window.addEventListener("resize",(()=>{S.width=window.innerWidth,S.height=window.innerHeight,K.aspect=S.width/S.height,K.updateProjectionMatrix(),ht.setSize(S.width,S.height),ht.setPixelRatio(Math.min(window.devicePixelRatio,2))})),E.add(ht,"toneMapping",{No:f,LInear:A,Reinhard:g,Cineon:x,ACESilmic:w}),E.add(ht,"toneMappingExposure").min(0).max(10).step(.001);const ct=new b;let dt=0;const ut=()=>{const e=ct.getElapsedTime(),i=e-dt;dt=e,O.step(1/60,i,3);for(const t of tt)t.mesh.position.copy(t.body.position),t.mesh.quaternion.copy(t.body.quaternion);lt.update(),ht.render(t,K),window.requestAnimationFrame(ut)};ut()})),(t,e)=>(S(),B("canvas",Js))}})}}}));
