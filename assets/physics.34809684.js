import{G as Se}from"./lil-gui.esm.7a5dd4ff.js";import{S as Be,D as Ne,C as Te,s as Zt,P as Ie,M as Nt,a as Pe,b as Tt,c as Fe,d as Re,B as Le,O as _e,W as We,A as $t,e as je,N as ke,L as Oe,R as Ve,f as Ge,g as He}from"./OrbitControls.0aa6d8be.js";import{G as Qt}from"./GLTFLoader.3487e58d.js";import{o as Ue,a as Ye,b as De,c as Xe}from"./index.d90aeefb.js";class J{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new a);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new a);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new J);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],c=s[2],l=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],y=n[0],v=n[1],w=n[2],m=n[3],A=n[4],x=n[5],E=n[6],q=n[7],M=n[8];return i[0]=o*y+r*m+c*E,i[1]=o*v+r*A+c*q,i[2]=o*w+r*x+c*M,i[3]=l*y+d*m+u*E,i[4]=l*v+d*A+u*q,i[5]=l*w+d*x+u*M,i[6]=h*y+f*m+p*E,i[7]=h*v+f*A+p*q,i[8]=h*w+f*x+p*M,e}scale(t,e){e===void 0&&(e=new J);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new a);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let c=3;const l=c;let d;const u=4;let h;do{if(o=l-c,i[o+n*o]===0){for(r=o+1;r<l;r++)if(i[o+n*r]!==0){d=u;do h=u-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<l;r++){const f=i[o+n*r]/i[o+n*o];d=u;do h=u-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--c);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new J);const e=3,s=6,n=Ke;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const c=r;let l;const d=s;let u;do{if(i=c-r,n[i+s*i]===0){for(o=i+1;o<c;o++)if(n[i+s*o]!==0){l=d;do u=d-l,n[u+s*i]+=n[u+s*o];while(--l);break}}if(n[i+s*i]!==0)for(o=i+1;o<c;o++){const h=n[i+s*o]/n[i+s*i];l=d;do u=d-l,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*h;while(--l)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];l=s;do u=s-l,n[u+s*o]=n[u+s*o]-n[u+s*i]*h;while(--l)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];l=s;do u=s-l,n[u+s*i]=n[u+s*i]*h;while(--l)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,c=n+n,l=e*o,d=e*r,u=e*c,h=s*r,f=s*c,p=n*c,y=i*o,v=i*r,w=i*c,m=this.elements;return m[3*0+0]=1-(h+p),m[3*0+1]=d-w,m[3*0+2]=u+v,m[3*1+0]=d+w,m[3*1+1]=1-(l+p),m[3*1+2]=f-y,m[3*2+0]=u-v,m[3*2+1]=f+y,m[3*2+2]=1-(l+h),this}transpose(t){t===void 0&&(t=new J);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const Ke=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class a{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new a);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z;return e.x=r*i-c*n,e.y=c*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new a(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new a(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new J([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new a);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new a);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new a),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new a),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new a),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Ze,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=$e;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(Jt),Jt.almostEquals(t,e)}clone(){return new a(this.x,this.y,this.z)}}a.ZERO=new a(0,0,0);a.UNIT_X=new a(1,0,0);a.UNIT_Y=new a(0,1,0);a.UNIT_Z=new a(0,0,1);const Ze=new a,$e=new a,Jt=new a;class ${constructor(t){t===void 0&&(t={}),this.lowerBound=new a,this.upperBound=new a,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let c=1;c<t.length;c++){let l=t[c];r&&(r.vmult(l,te),l=te),l.x>o.x&&(o.x=l.x),l.x<i.x&&(i.x=l.x),l.y>o.y&&(o.y=l.y),l.y<i.y&&(i.y=l.y),l.z>o.z&&(o.z=l.z),l.z<i.z&&(i.z=l.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new $().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,c=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&c}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,c){const l=this.lowerBound,d=this.upperBound;t.copy(l),e.set(d.x,l.y,l.z),s.set(d.x,d.y,l.z),n.set(l.x,d.y,d.z),i.set(d.x,l.y,d.z),o.set(l.x,d.y,l.z),r.set(l.x,l.y,d.z),c.copy(d)}toLocalFrame(t,e){const s=ee,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,c,l,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=ee,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,c,l,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,c=(this.upperBound.x-s.x)*n,l=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,c),Math.min(l,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,c),Math.max(l,d)),Math.max(u,h));return!(p<0||f>p)}}const te=new a,ee=[new a,new a,new a,new a,new a,new a,new a,new a];class se{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class we{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class H{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new a),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Qe,n=Je;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new H);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,c=t.y,l=t.z,d=t.w;return e.x=s*d+o*r+n*l-i*c,e.y=n*d+o*c+i*r-s*l,e.z=i*d+o*l+s*c-n*r,e.w=o*d-s*r-n*c-i*l,e}inverse(t){t===void 0&&(t=new H);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new H),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new a);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z,l=this.w,d=l*s+r*i-c*n,u=l*n+c*s-o*i,h=l*i+o*n-r*s,f=-o*s-r*n-c*i;return e.x=d*l+f*-o+u*-c-h*-r,e.y=u*l+f*-r+h*-o-d*-c,e.z=h*l+f*-c+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,c=this.z,l=this.w;switch(e){case"YZX":const d=o*r+c*l;if(d>.499&&(s=2*Math.atan2(o,l),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,l),n=-Math.PI/2,i=0),s===void 0){const u=o*o,h=r*r,f=c*c;s=Math.atan2(2*r*l-2*o*c,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*l-2*r*c,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),c=Math.sin(t/2),l=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=c*o*r+i*l*d,this.y=i*l*r-c*o*d,this.z=i*o*d+c*l*r,this.w=i*o*r-c*l*d):n==="YXZ"?(this.x=c*o*r+i*l*d,this.y=i*l*r-c*o*d,this.z=i*o*d-c*l*r,this.w=i*o*r+c*l*d):n==="ZXY"?(this.x=c*o*r-i*l*d,this.y=i*l*r+c*o*d,this.z=i*o*d+c*l*r,this.w=i*o*r-c*l*d):n==="ZYX"?(this.x=c*o*r-i*l*d,this.y=i*l*r+c*o*d,this.z=i*o*d-c*l*r,this.w=i*o*r+c*l*d):n==="YZX"?(this.x=c*o*r+i*l*d,this.y=i*l*r+c*o*d,this.z=i*o*d-c*l*r,this.w=i*o*r-c*l*d):n==="XZY"&&(this.x=c*o*r-i*l*d,this.y=i*l*r-c*o*d,this.z=i*o*d+c*l*r,this.w=i*o*r+c*l*d),this}clone(){return new H(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new H);const n=this.x,i=this.y,o=this.z,r=this.w;let c=t.x,l=t.y,d=t.z,u=t.w,h,f,p,y,v;return f=n*c+i*l+o*d+r*u,f<0&&(f=-f,c=-c,l=-l,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),y=Math.sin((1-e)*h)/p,v=Math.sin(e*h)/p):(y=1-e,v=e),s.x=y*n+v*c,s.y=y*i+v*l,s.z=y*o+v*d,s.w=y*r+v*u,s}integrate(t,e,s,n){n===void 0&&(n=new H);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,c=this.x,l=this.y,d=this.z,u=this.w,h=e*.5;return n.x+=h*(i*u+o*d-r*l),n.y+=h*(o*u+r*c-i*d),n.z+=h*(r*u+i*l-o*c),n.w+=h*(-i*c-o*l-r*d),n}}const Qe=new a,Je=new a,ts={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class S{constructor(t){t===void 0&&(t={}),this.id=S.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}S.idCounter=0;S.types=ts;class O{constructor(t){t===void 0&&(t={}),this.position=new a,this.quaternion=new H,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return O.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return O.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new a),s.vsub(t,n),e.conjugate(ne),ne.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new a),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new a),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new a),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const ne=new H;class zt extends S{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:S.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new a;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let c=0;c!==r;c++){const l=(c+1)%r;e[o[c]].vsub(e[o[l]],n),n.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new a;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];zt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new a,o=new a;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,c,l){const d=new a;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),i.vmult(d,d);const y=d.dot(o);y>h&&(h=y,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const y=s.vertices[s.faces[u][p]],v=new a;v.copy(y),i.vmult(v,v),n.vadd(v,v),f.push(v)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,c,l)}findSeparatingAxis(t,e,s,n,i,o,r,c){const l=new a,d=new a,u=new a,h=new a,f=new a,p=new a;let y=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let w=0;w!==v.uniqueAxes.length;w++){s.vmult(v.uniqueAxes[w],l);const m=v.testSepAxis(l,t,e,s,n,i);if(m===!1)return!1;m<y&&(y=m,o.copy(l))}else{const w=r?r.length:v.faces.length;for(let m=0;m<w;m++){const A=r?r[m]:m;l.copy(v.faceNormals[A]),s.vmult(l,l);const x=v.testSepAxis(l,t,e,s,n,i);if(x===!1)return!1;x<y&&(y=x,o.copy(l))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const m=v.testSepAxis(d,t,e,s,n,i);if(m===!1)return!1;m<y&&(y=m,o.copy(d))}else{const w=c?c.length:t.faces.length;for(let m=0;m<w;m++){const A=c?c[m]:m;d.copy(t.faceNormals[A]),i.vmult(d,d);const x=v.testSepAxis(d,t,e,s,n,i);if(x===!1)return!1;x<y&&(y=x,o.copy(d))}}for(let w=0;w!==v.uniqueEdges.length;w++){s.vmult(v.uniqueEdges[w],h);for(let m=0;m!==t.uniqueEdges.length;m++)if(i.vmult(t.uniqueEdges[m],f),h.cross(f,p),!p.almostZero()){p.normalize();const A=v.testSepAxis(p,t,e,s,n,i);if(A===!1)return!1;A<y&&(y=A,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;zt.project(r,t,s,n,jt),zt.project(e,t,i,o,kt);const c=jt[0],l=jt[1],d=kt[0],u=kt[1];if(c<u||d<l)return!1;const h=c-u,f=d-l;return h<f?h:f}calculateLocalInertia(t,e){const s=new a,n=new a;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const c=new a,l=new a,d=new a,u=new a,h=new a,f=new a,p=new a,y=new a,v=this,w=[],m=n,A=w;let x=-1,E=Number.MAX_VALUE;for(let T=0;T<v.faces.length;T++){c.copy(v.faceNormals[T]),s.vmult(c,c);const P=c.dot(t);P<E&&(E=P,x=T)}if(x<0)return;const q=v.faces[x];q.connectedFaces=[];for(let T=0;T<v.faces.length;T++)for(let P=0;P<v.faces[T].length;P++)q.indexOf(v.faces[T][P])!==-1&&T!==x&&q.connectedFaces.indexOf(T)===-1&&q.connectedFaces.push(T);const M=q.length;for(let T=0;T<M;T++){const P=v.vertices[q[T]],_=v.vertices[q[(T+1)%M]];P.vsub(_,l),d.copy(l),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[x]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(P),s.vmult(f,f),e.vadd(f,f);const g=q.connectedFaces[T];p.copy(this.faceNormals[g]);const C=this.getPlaneConstantOfFace(g);y.copy(p),s.vmult(y,y);const z=C-y.dot(e);for(this.clipFaceAgainstPlane(m,A,y,z);m.length;)m.shift();for(;A.length;)m.push(A.shift())}p.copy(this.faceNormals[x]);const N=this.getPlaneConstantOfFace(x);y.copy(p),s.vmult(y,y);const F=N-y.dot(e);for(let T=0;T<m.length;T++){let P=y.dot(m[T])+F;if(P<=i&&(console.log(`clamped: depth=${P} to minDist=${i}`),P=i),P<=o){const _=m[T];if(P<=1e-6){const g={point:_,normal:y,depth:P};r.push(g)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let c=t[t.length-1],l=t[0];i=s.dot(c)+n;for(let d=0;d<r;d++){if(l=t[d],o=s.dot(l)+n,i<0)if(o<0){const u=new a;u.copy(l),e.push(u)}else{const u=new a;c.lerp(l,i/(i-o),u),e.push(u)}else if(o<0){const u=new a;c.lerp(l,i/(i-o),u),e.push(u),e.push(l)}c=l,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new a);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new a);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,c,l,d,u,h=new a;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(l===void 0||p.x>l)&&(l=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(c===void 0||p.z<c)&&(c=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,c),n.set(l,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new a);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new a;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let c=n[r];const l=e[s[r][0]],d=new a;t.vsub(l,d);const u=c.dot(d),h=new a;o.vsub(l,h);const f=c.dot(h);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=es;let c=0,l=0;const d=ss,u=t.vertices;d.setZero(),O.vectorToLocalFrame(s,n,e,r),O.pointToLocalFrame(s,n,d,d);const h=d.dot(r);l=c=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>c&&(c=p),p<l&&(l=p)}if(l-=h,c-=h,l>c){const f=l;l=c,c=f}i[0]=c,i[1]=l}}const jt=[],kt=[];new a;const es=new a,ss=new a;class Wt extends S{constructor(t){super({type:S.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=a,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],c=new zt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=c,c.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new a),Wt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)dt.set(i[o][0],i[o][1],i[o][2]),e.vmult(dt,dt),t.vadd(dt,dt),s(dt.x,dt.y,dt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;et[0].set(i.x,i.y,i.z),et[1].set(-i.x,i.y,i.z),et[2].set(-i.x,-i.y,i.z),et[3].set(-i.x,-i.y,-i.z),et[4].set(i.x,-i.y,-i.z),et[5].set(i.x,i.y,-i.z),et[6].set(-i.x,i.y,-i.z),et[7].set(i.x,-i.y,i.z);const o=et[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const c=et[r];e.vmult(c,c),t.vadd(c,c);const l=c.x,d=c.y,u=c.z;l>n.x&&(n.x=l),d>n.y&&(n.y=d),u>n.z&&(n.z=u),l<s.x&&(s.x=l),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const dt=new a,et=[new a,new a,new a,new a,new a,new a,new a,new a],Ut={DYNAMIC:1,STATIC:2,KINEMATIC:4},Yt={AWAKE:0,SLEEPY:1,SLEEPING:2};class B extends we{constructor(t){t===void 0&&(t={}),super(),this.id=B.idCounter++,this.index=-1,this.world=null,this.vlambda=new a,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new a,this.previousPosition=new a,this.interpolatedPosition=new a,this.initPosition=new a,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new a,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new a,this.force=new a;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?B.STATIC:B.DYNAMIC,typeof t.type==typeof B.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=B.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new a,this.quaternion=new H,this.initQuaternion=new H,this.previousQuaternion=new H,this.interpolatedQuaternion=new H,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new a,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new a,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new a,this.invInertia=new a,this.invInertiaWorld=new J,this.invMassSolve=0,this.invInertiaSolve=new a,this.invInertiaWorldSolve=new J,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new a(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new a(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new $,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new a,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=B.AWAKE,this.wakeUpAfterNarrowphase=!1,t===B.SLEEPING&&this.dispatchEvent(B.wakeupEvent)}sleep(){this.sleepState=B.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===B.AWAKE&&s<n?(this.sleepState=B.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(B.sleepyEvent)):e===B.SLEEPY&&s>n?this.wakeUp():e===B.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(B.sleepEvent))}}updateSolveMassProperties(){this.sleepState===B.SLEEPING||this.type===B.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new a),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new a),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new a,i=new H;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),c=o.boundingSphereRadius;r+c>n&&(n=r+c)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=ns,o=is,r=this.quaternion,c=this.aabb,l=os;for(let d=0;d!==n;d++){const u=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),u.calculateWorldAABB(i,o,l.lowerBound,l.upperBound),d===0?c.copy(l):c.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=rs,n=as;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new a),this.type!==B.DYNAMIC)return;this.sleepState===B.SLEEPING&&this.wakeUp();const s=ls;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new a),this.type!==B.DYNAMIC)return;const s=hs,n=ds;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===B.DYNAMIC&&(this.sleepState===B.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new a),this.type!==B.DYNAMIC)return;this.sleepState===B.SLEEPING&&this.wakeUp();const s=e,n=us;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=ps;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new a),this.type!==B.DYNAMIC)return;const s=fs,n=ms;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=vs;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Wt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new a;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===B.DYNAMIC||this.type===B.KINEMATIC)||this.sleepState===B.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,c=this.torque,l=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const p=u.elements,y=this.angularFactor,v=c.x*y.x,w=c.y*y.y,m=c.z*y.z;i.x+=t*(p[0]*v+p[1]*w+p[2]*m),i.y+=t*(p[3]*v+p[4]*w+p[5]*m),i.z+=t*(p[6]*v+p[7]*w+p[8]*m),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}B.idCounter=0;B.COLLIDE_EVENT_NAME="collide";B.DYNAMIC=Ut.DYNAMIC;B.STATIC=Ut.STATIC;B.KINEMATIC=Ut.KINEMATIC;B.AWAKE=Yt.AWAKE;B.SLEEPY=Yt.SLEEPY;B.SLEEPING=Yt.SLEEPING;B.wakeupEvent={type:"wakeup"};B.sleepyEvent={type:"sleepy"};B.sleepEvent={type:"sleep"};const ns=new a,is=new H,os=new $,rs=new J,as=new J,cs=new J,ls=new a,hs=new a,ds=new a,us=new a,ps=new a,fs=new a,ms=new a,vs=new a;class Ae{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&B.STATIC)!==0||t.sleepState===B.SLEEPING)&&((e.type&B.STATIC)!==0||e.sleepState===B.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=ys;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=ws,n=As,i=xs,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const c=n[r].id,l=i[r].id,d=c<l?`${c},${l}`:`${l},${c}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const c=s.keys.pop(),l=s[c];t.push(n[l]),e.push(i[l]),delete s[c]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new a;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const ys=new a;new a;new H;new a;const ws={keys:[]},As=[],xs=[];new a;new a;new a;class gs extends Ae{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let c=0;c!==i;c++)for(let l=0;l!==c;l++)o=n[c],r=n[l],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class _t{constructor(){this.rayFromWorld=new a,this.rayToWorld=new a,this.hitNormalWorld=new a,this.hitPointWorld=new a,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let xe,ge,be,Ee,qe,ze,Ce;const Dt={CLOSEST:1,ANY:2,ALL:4};xe=S.types.SPHERE;ge=S.types.PLANE;be=S.types.BOX;Ee=S.types.CYLINDER;qe=S.types.CONVEXPOLYHEDRON;ze=S.types.HEIGHTFIELD;Ce=S.types.TRIMESH;class G{get[xe](){return this._intersectSphere}get[ge](){return this._intersectPlane}get[be](){return this._intersectBox}get[Ee](){return this._intersectConvex}get[qe](){return this._intersectConvex}get[ze](){return this._intersectHeightfield}get[Ce](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new a),e===void 0&&(e=new a),this.from=t.clone(),this.to=e.clone(),this.direction=new a,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=G.ANY,this.result=new _t,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||G.ANY,this.result=e.result||new _t,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(ie),Ot.length=0,t.broadphase.aabbQuery(t,ie,Ot),this.intersectBodies(Ot),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const n=bs,i=Es;for(let o=0,r=t.shapes.length;o<r;o++){const c=t.shapes[o];if(!(s&&!c.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(c,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(_s(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,c=this.direction,l=new a(0,0,1);e.vmult(l,l);const d=new a;o.vsub(s,d);const u=d.dot(l);r.vsub(s,d);const h=d.dot(l);if(u*h>0||o.distanceTo(r)<u)return;const f=l.dot(c);if(Math.abs(f)<this.precision)return;const p=new a,y=new a,v=new a;o.vsub(s,p);const w=-l.dot(p)/f;c.scale(w,y),o.vadd(y,v),this.reportIntersection(l,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=qs;o.from.copy(this.from),o.to.copy(this.to),O.pointToLocalFrame(s,e,o.from,o.from),O.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=zs;let c,l,d,u;c=l=0,d=u=t.data.length-1;const h=new $;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),c=Math.max(c,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=c;f<d;f++)for(let p=l;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),O.pointToWorldFrame(s,e,t.pillarOffset,It),this._intersectConvex(t.pillarConvex,e,It,n,i,oe),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),O.pointToWorldFrame(s,e,t.pillarOffset,It),this._intersectConvex(t.pillarConvex,e,It,n,i,oe)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,c=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-c**2,h=d**2-4*l*u,f=Cs,p=Ms;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const y=(-d-Math.sqrt(h))/(2*l),v=(-d+Math.sqrt(h))/(2*l);if(y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=Ss,c=re,l=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),w=l?l.length:d.length,m=this.result;for(let A=0;!m.shouldStop&&A<w;A++){const x=l?l[A]:A,E=d[x],q=h[x],M=e,N=s;c.copy(u[E[0]]),M.vmult(c,c),c.vadd(N,c),c.vsub(p,c),M.vmult(q,r);const F=f.dot(r);if(Math.abs(F)<this.precision)continue;const T=r.dot(c)/F;if(!(T<0)){f.scale(T,K),K.vadd(p,K),Q.copy(u[E[0]]),M.vmult(Q,Q),N.vadd(Q,Q);for(let P=1;!m.shouldStop&&P<E.length-1;P++){st.copy(u[E[P]]),nt.copy(u[E[P+1]]),M.vmult(st,st),M.vmult(nt,nt),N.vadd(st,st),N.vadd(nt,nt);const _=K.distanceTo(p);!(G.pointInTriangle(K,Q,st,nt)||G.pointInTriangle(K,st,Q,nt))||_>v||this.reportIntersection(r,K,i,n,x)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=Bs,c=Rs,l=Ls,d=re,u=Ns,h=Ts,f=Is,p=Fs,y=Ps,v=t.indices;t.vertices;const w=this.from,m=this.to,A=this.direction;l.position.copy(s),l.quaternion.copy(e),O.vectorToLocalFrame(s,e,A,u),O.pointToLocalFrame(s,e,w,h),O.pointToLocalFrame(s,e,m,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const x=h.distanceSquared(f);t.tree.rayQuery(this,l,c);for(let E=0,q=c.length;!this.result.shouldStop&&E!==q;E++){const M=c[E];t.getNormal(M,r),t.getVertex(v[M*3],Q),Q.vsub(h,d);const N=u.dot(r),F=r.dot(d)/N;if(F<0)continue;u.scale(F,K),K.vadd(h,K),t.getVertex(v[M*3+1],st),t.getVertex(v[M*3+2],nt);const T=K.distanceSquared(h);!(G.pointInTriangle(K,st,Q,nt)||G.pointInTriangle(K,Q,st,nt))||T>x||(O.vectorToWorldFrame(e,r,y),O.pointToWorldFrame(s,e,K,p),this.reportIntersection(y,p,i,n,M))}c.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,c=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case G.ALL:this.hasHit=!0,l.set(o,r,t,e,s,n,c),l.hasHit=!0,this.callback(l);break;case G.CLOSEST:(c<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,c));break;case G.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,c),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,ft),s.vsub(e,gt),t.vsub(e,Vt);const i=ft.dot(ft),o=ft.dot(gt),r=ft.dot(Vt),c=gt.dot(gt),l=gt.dot(Vt);let d,u;return(d=c*r-o*l)>=0&&(u=i*l-o*r)>=0&&d+u<i*c-o*o}}G.CLOSEST=Dt.CLOSEST;G.ANY=Dt.ANY;G.ALL=Dt.ALL;const ie=new $,Ot=[],gt=new a,Vt=new a,bs=new a,Es=new H,K=new a,Q=new a,st=new a,nt=new a;new a;new _t;const oe={faceList:[0]},It=new a,qs=new G,zs=[],Cs=new a,Ms=new a,Ss=new a;new a;new a;const re=new a,Bs=new a,Ns=new a,Ts=new a,Is=new a,Ps=new a,Fs=new a;new $;const Rs=[],Ls=new O,ft=new a,Pt=new a;function _s(W,t,e){e.vsub(W,ft);const s=ft.dot(t);return t.scale(s,Pt),Pt.vadd(W,Pt),e.distanceTo(Pt)}class At extends Ae{static checkBounds(t,e,s){let n,i;s===0?(n=t.position.x,i=e.position.x):s===1?(n=t.position.y,i=e.position.y):s===2&&(n=t.position.z,i=e.position.z);const o=t.boundingRadius,r=e.boundingRadius,c=n+o;return i-r<c}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=n.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=n.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=n.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=n}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const n=e.indexOf(s.body);n!==-1&&e.splice(n,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const n=this.axisList,i=n.length,o=this.axisIndex;let r,c;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==i;r++){const l=n[r];for(c=r+1;c<i;c++){const d=n[c];if(!!this.needBroadphaseCollision(l,d)){if(!At.checkBounds(l,d,o))break;this.intersectionTest(l,d,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let n=0;n!==s;n++){const i=t[n];i.aabbNeedsUpdate&&i.updateAABB()}e===0?At.insertionSortX(t):e===1?At.insertionSortY(t):e===2&&At.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,n=0,i=0,o=0;const r=this.axisList,c=r.length,l=1/c;for(let f=0;f!==c;f++){const p=r[f],y=p.position.x;t+=y,e+=y*y;const v=p.position.y;s+=v,n+=v*v;const w=p.position.z;i+=w,o+=w*w}const d=e-t*t*l,u=n-s*s*l,h=o-i*i*l;d>u?d>h?this.axisIndex=0:this.axisIndex=2:u>h?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const n=this.axisIndex;let i="x";n===1&&(i="y"),n===2&&(i="z");const o=this.axisList;e.lowerBound[i],e.upperBound[i];for(let r=0;r<o.length;r++){const c=o[r];c.aabbNeedsUpdate&&c.updateAABB(),c.aabb.overlaps(e)&&s.push(c)}return s}}class Ws{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class ae{constructor(){this.spatial=new a,this.rotational=new a}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Ct{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=Ct.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new ae,this.jacobianElementB=new ae,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,c=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,c=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,c=n.torque,l=s.invMassSolve,d=n.invMassSolve;return i.scale(l,ce),r.scale(d,le),s.invInertiaWorldSolve.vmult(o,he),n.invInertiaWorldSolve.vmult(c,de),t.multiplyVectors(ce,he)+e.multiplyVectors(le,de)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,c=n.invInertiaWorldSolve;let l=i+o;return r.vmult(t.rotational,Ft),l+=Ft.dot(t.rotational),c.vmult(e.rotational,Ft),l+=Ft.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=js;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Ct.idCounter=0;const ce=new a,le=new a,he=new a,de=new a,Ft=new a,js=new a;class ks extends Ct{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new a,this.rj=new a,this.ni=new a}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,c=Os,l=Vs,d=n.velocity,u=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=Gs,y=this.jacobianElementA,v=this.jacobianElementB,w=this.ni;o.cross(w,c),r.cross(w,l),w.negate(y.spatial),c.negate(y.rotational),v.spatial.copy(w),v.rotational.copy(l),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const m=w.dot(p),A=this.restitution+1,x=A*h.dot(w)-A*d.dot(w)+f.dot(l)-u.dot(c),E=this.computeGiMf();return-m*e-x*s-t*E}getImpactVelocityAlongNormal(){const t=Hs,e=Us,s=Ys,n=Ds,i=Xs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Os=new a,Vs=new a,Gs=new a,Hs=new a,Us=new a,Ys=new a,Ds=new a,Xs=new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class ue extends Ct{constructor(t,e,s){super(t,e,-s,s),this.ri=new a,this.rj=new a,this.t=new a}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Ks,o=Zs,r=this.t;s.cross(r,i),n.cross(r,o);const c=this.jacobianElementA,l=this.jacobianElementB;r.negate(c.spatial),i.negate(c.rotational),l.spatial.copy(r),l.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const Ks=new a,Zs=new a;class xt{constructor(t,e,s){s=Ws.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=xt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}xt.idCounter=0;class mt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=mt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}mt.idCounter=0;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new G;new a;new a;new a;new a(1,0,0),new a(0,1,0),new a(0,0,1);new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class $s extends S{constructor(t){if(super({type:S.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new a);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const c=o[r];s[c]=t[c]-i,n[c]=t[c]+i}}}new a;new a;new a;new a;new a;new a;new a;new a;new a;class Qs extends S{constructor(){super({type:S.types.PLANE}),this.worldNormal=new a,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new a),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){ot.set(0,0,1),e.vmult(ot,ot);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),ot.x===1?n.x=t.x:ot.x===-1&&(s.x=t.x),ot.y===1?n.y=t.y:ot.y===-1&&(s.y=t.y),ot.z===1?n.z=t.z:ot.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const ot=new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new $;new a;new $;new a;new a;new a;new a;new a;new a;new a;new $;new a;new O;new $;class Js{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class tn extends Js{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,c=e.bodies,l=c.length,d=t;let u,h,f,p,y,v;if(r!==0)for(let x=0;x!==l;x++)c[x].updateSolveMassProperties();const w=sn,m=nn,A=en;w.length=r,m.length=r,A.length=r;for(let x=0;x!==r;x++){const E=o[x];A[x]=0,m[x]=E.computeB(d),w[x]=1/E.computeC()}if(r!==0){for(let q=0;q!==l;q++){const M=c[q],N=M.vlambda,F=M.wlambda;N.set(0,0,0),F.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let q=0;q!==r;q++){const M=o[q];u=m[q],h=w[q],v=A[q],y=M.computeGWlambda(),f=h*(u-y-M.eps*v),v+f<M.minForce?f=M.minForce-v:v+f>M.maxForce&&(f=M.maxForce-v),A[q]+=f,p+=f>0?f:-f,M.addToWlambda(f)}if(p*p<i)break}for(let q=0;q!==l;q++){const M=c[q],N=M.velocity,F=M.angularVelocity;M.vlambda.vmul(M.linearFactor,M.vlambda),N.vadd(M.vlambda,N),M.wlambda.vmul(M.angularFactor,M.wlambda),F.vadd(M.wlambda,F)}let x=o.length;const E=1/d;for(;x--;)o[x].multiplier=A[x]*E}return s}}const en=[],sn=[],nn=[];B.STATIC;class on{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class rn extends on{constructor(){super(...arguments),this.type=a}constructObject(){return new a}}const V={sphereSphere:S.types.SPHERE,spherePlane:S.types.SPHERE|S.types.PLANE,boxBox:S.types.BOX|S.types.BOX,sphereBox:S.types.SPHERE|S.types.BOX,planeBox:S.types.PLANE|S.types.BOX,convexConvex:S.types.CONVEXPOLYHEDRON,sphereConvex:S.types.SPHERE|S.types.CONVEXPOLYHEDRON,planeConvex:S.types.PLANE|S.types.CONVEXPOLYHEDRON,boxConvex:S.types.BOX|S.types.CONVEXPOLYHEDRON,sphereHeightfield:S.types.SPHERE|S.types.HEIGHTFIELD,boxHeightfield:S.types.BOX|S.types.HEIGHTFIELD,convexHeightfield:S.types.CONVEXPOLYHEDRON|S.types.HEIGHTFIELD,sphereParticle:S.types.PARTICLE|S.types.SPHERE,planeParticle:S.types.PLANE|S.types.PARTICLE,boxParticle:S.types.BOX|S.types.PARTICLE,convexParticle:S.types.PARTICLE|S.types.CONVEXPOLYHEDRON,cylinderCylinder:S.types.CYLINDER,sphereCylinder:S.types.SPHERE|S.types.CYLINDER,planeCylinder:S.types.PLANE|S.types.CYLINDER,boxCylinder:S.types.BOX|S.types.CYLINDER,convexCylinder:S.types.CONVEXPOLYHEDRON|S.types.CYLINDER,heightfieldCylinder:S.types.HEIGHTFIELD|S.types.CYLINDER,particleCylinder:S.types.PARTICLE|S.types.CYLINDER,sphereTrimesh:S.types.SPHERE|S.types.TRIMESH,planeTrimesh:S.types.PLANE|S.types.TRIMESH};class an{get[V.sphereSphere](){return this.sphereSphere}get[V.spherePlane](){return this.spherePlane}get[V.boxBox](){return this.boxBox}get[V.sphereBox](){return this.sphereBox}get[V.planeBox](){return this.planeBox}get[V.convexConvex](){return this.convexConvex}get[V.sphereConvex](){return this.sphereConvex}get[V.planeConvex](){return this.planeConvex}get[V.boxConvex](){return this.boxConvex}get[V.sphereHeightfield](){return this.sphereHeightfield}get[V.boxHeightfield](){return this.boxHeightfield}get[V.convexHeightfield](){return this.convexHeightfield}get[V.sphereParticle](){return this.sphereParticle}get[V.planeParticle](){return this.planeParticle}get[V.boxParticle](){return this.boxParticle}get[V.convexParticle](){return this.convexParticle}get[V.cylinderCylinder](){return this.convexConvex}get[V.sphereCylinder](){return this.sphereConvex}get[V.planeCylinder](){return this.planeConvex}get[V.boxCylinder](){return this.boxConvex}get[V.convexCylinder](){return this.convexConvex}get[V.heightfieldCylinder](){return this.heightfieldCylinder}get[V.particleCylinder](){return this.particleCylinder}get[V.sphereTrimesh](){return this.sphereTrimesh}get[V.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new rn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new ks(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const c=this.currentContactMaterial;r.restitution=c.restitution,r.setSpookParams(c.contactEquationStiffness,c.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,d=n.material||e.material;return l&&d&&l.restitution>=0&&d.restitution>=0&&(r.restitution=l.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,c=this.currentContactMaterial;let l=c.friction;const d=i.material||s.material,u=o.material||n.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(l=d.friction*u.friction),l>0){const h=l*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,y=p.length?p.pop():new ue(s,n,h*f),v=p.length?p.pop():new ue(s,n,h*f);return y.bi=v.bi=s,y.bj=v.bj=n,y.minForce=v.minForce=-h*f,y.maxForce=v.maxForce=h*f,y.ri.copy(t.ri),y.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(y.t,v.t),y.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),v.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),y.enabled=v.enabled=t.enabled,e.push(y,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];pt.setZero(),yt.setZero(),wt.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(pt.vadd(e.ni,pt),yt.vadd(e.ri,yt),wt.vadd(e.rj,wt)):(pt.vsub(e.ni,pt),yt.vadd(e.rj,yt),wt.vadd(e.ri,wt));const o=1/t;yt.scale(o,s.ri),wt.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),pt.normalize(),pt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const c=hn,l=dn,d=cn,u=ln;for(let h=0,f=t.length;h!==f;h++){const p=t[h],y=e[h];let v=null;p.material&&y.material&&(v=s.getContactMaterial(p.material,y.material)||null);const w=p.type&B.KINEMATIC&&y.type&B.STATIC||p.type&B.STATIC&&y.type&B.KINEMATIC||p.type&B.KINEMATIC&&y.type&B.KINEMATIC;for(let m=0;m<p.shapes.length;m++){p.quaternion.mult(p.shapeOrientations[m],c),p.quaternion.vmult(p.shapeOffsets[m],d),d.vadd(p.position,d);const A=p.shapes[m];for(let x=0;x<y.shapes.length;x++){y.quaternion.mult(y.shapeOrientations[x],l),y.quaternion.vmult(y.shapeOffsets[x],u),u.vadd(y.position,u);const E=y.shapes[x];if(!(A.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&A.collisionFilterGroup)||d.distanceTo(u)>A.boundingSphereRadius+E.boundingSphereRadius)continue;let q=null;A.material&&E.material&&(q=s.getContactMaterial(A.material,E.material)||null),this.currentContactMaterial=q||v||s.defaultContactMaterial;const M=A.type|E.type,N=this[M];if(N){let F=!1;A.type<E.type?F=N.call(this,A,E,d,u,c,l,p,y,A,E,w):F=N.call(this,E,A,u,d,l,c,y,p,A,E,w),F&&w&&(s.shapeOverlapKeeper.set(A.id,E.id),s.bodyOverlapKeeper.set(p.id,y.id))}}}}}sphereSphere(t,e,s,n,i,o,r,c,l,d,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,c,t,e,l,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(c.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,c,l,d,u){const h=this.createContactEquation(r,c,t,e,l,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Rt),h.ni.scale(h.ni.dot(Rt),pe),Rt.vsub(pe,h.rj),-Rt.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(c.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}sphereBox(t,e,s,n,i,o,r,c,l,d,u){const h=this.v3pool,f=_n;s.vsub(n,Lt),e.getSideNormals(f,o);const p=t.radius;let y=!1;const v=jn,w=kn,m=On;let A=null,x=0,E=0,q=0,M=null;for(let b=0,k=f.length;b!==k&&y===!1;b++){const R=Fn;R.copy(f[b]);const L=R.length();R.normalize();const X=Lt.dot(R);if(X<L+p&&X>0){const Y=Rn,I=Ln;Y.copy(f[(b+1)%3]),I.copy(f[(b+2)%3]);const it=Y.length(),ut=I.length();Y.normalize(),I.normalize();const vt=Lt.dot(Y),D=Lt.dot(I);if(vt<it&&vt>-it&&D<ut&&D>-ut){const Mt=Math.abs(X-L-p);if((M===null||Mt<M)&&(M=Mt,E=vt,q=D,A=L,v.copy(R),w.copy(Y),m.copy(I),x++,u))return!0}}}if(x){y=!0;const b=this.createContactEquation(r,c,t,e,l,d);v.scale(-p,b.ri),b.ni.copy(v),b.ni.negate(b.ni),v.scale(A,v),w.scale(E,w),v.vadd(w,v),m.scale(q,m),v.vadd(m,b.rj),b.ri.vadd(s,b.ri),b.ri.vsub(r.position,b.ri),b.rj.vadd(n,b.rj),b.rj.vsub(c.position,b.rj),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult)}let N=h.get();const F=Wn;for(let b=0;b!==2&&!y;b++)for(let k=0;k!==2&&!y;k++)for(let R=0;R!==2&&!y;R++)if(N.set(0,0,0),b?N.vadd(f[0],N):N.vsub(f[0],N),k?N.vadd(f[1],N):N.vsub(f[1],N),R?N.vadd(f[2],N):N.vsub(f[2],N),n.vadd(N,F),F.vsub(s,F),F.lengthSquared()<p*p){if(u)return!0;y=!0;const L=this.createContactEquation(r,c,t,e,l,d);L.ri.copy(F),L.ri.normalize(),L.ni.copy(L.ri),L.ri.scale(p,L.ri),L.rj.copy(N),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),L.rj.vadd(n,L.rj),L.rj.vsub(c.position,L.rj),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}h.release(N),N=null;const T=h.get(),P=h.get(),_=h.get(),g=h.get(),C=h.get(),z=f.length;for(let b=0;b!==z&&!y;b++)for(let k=0;k!==z&&!y;k++)if(b%3!==k%3){f[k].cross(f[b],T),T.normalize(),f[b].vadd(f[k],P),_.copy(s),_.vsub(P,_),_.vsub(n,_);const R=_.dot(T);T.scale(R,g);let L=0;for(;L===b%3||L===k%3;)L++;C.copy(s),C.vsub(g,C),C.vsub(P,C),C.vsub(n,C);const X=Math.abs(R),Y=C.length();if(X<f[L].length()&&Y<p){if(u)return!0;y=!0;const I=this.createContactEquation(r,c,t,e,l,d);P.vadd(g,I.rj),I.rj.copy(I.rj),C.negate(I.ni),I.ni.normalize(),I.ri.copy(I.rj),I.ri.vadd(n,I.ri),I.ri.vsub(s,I.ri),I.ri.normalize(),I.ri.scale(p,I.ri),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),I.rj.vadd(n,I.rj),I.rj.vsub(c.position,I.rj),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult)}}h.release(T,P,_,g,C)}planeBox(t,e,s,n,i,o,r,c,l,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}convexConvex(t,e,s,n,i,o,r,c,l,d,u,h,f){const p=si;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,h,f)){const y=[],v=ni;t.clipAgainstHull(s,i,e,n,o,p,-100,100,y);let w=0;for(let m=0;m!==y.length;m++){if(u)return!0;const A=this.createContactEquation(r,c,t,e,l,d),x=A.ri,E=A.rj;p.negate(A.ni),y[m].normal.negate(v),v.scale(y[m].depth,v),y[m].point.vadd(v,x),E.copy(y[m].point),x.vsub(s,x),E.vsub(n,E),x.vadd(s,x),x.vsub(r.position,x),E.vadd(n,E),E.vsub(c.position,E),this.result.push(A),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(A,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,c,l,d,u){const h=this.v3pool;s.vsub(n,Vn);const f=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let w=!1;for(let m=0;m!==y.length;m++){const A=y[m],x=Yn;o.vmult(A,x),n.vadd(x,x);const E=Un;if(x.vsub(s,E),E.lengthSquared()<v*v){if(u)return!0;w=!0;const q=this.createContactEquation(r,c,t,e,l,d);q.ri.copy(E),q.ri.normalize(),q.ni.copy(q.ri),q.ri.scale(v,q.ri),x.vsub(n,q.rj),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),q.rj.vadd(n,q.rj),q.rj.vsub(c.position,q.rj),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult);return}}for(let m=0,A=p.length;m!==A&&w===!1;m++){const x=f[m],E=p[m],q=Dn;o.vmult(x,q);const M=Xn;o.vmult(y[E[0]],M),M.vadd(n,M);const N=Kn;q.scale(-v,N),s.vadd(N,N);const F=Zn;N.vsub(M,F);const T=F.dot(q),P=$n;if(s.vsub(M,P),T<0&&P.dot(q)>0){const _=[];for(let g=0,C=E.length;g!==C;g++){const z=h.get();o.vmult(y[E[g]],z),n.vadd(z,z),_.push(z)}if(Pn(_,q,s)){if(u)return!0;w=!0;const g=this.createContactEquation(r,c,t,e,l,d);q.scale(-v,g.ri),q.negate(g.ni);const C=h.get();q.scale(-T,C);const z=h.get();q.scale(-v,z),s.vsub(n,g.rj),g.rj.vadd(z,g.rj),g.rj.vadd(C,g.rj),g.rj.vadd(n,g.rj),g.rj.vsub(c.position,g.rj),g.ri.vadd(s,g.ri),g.ri.vsub(r.position,g.ri),h.release(C),h.release(z),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult);for(let b=0,k=_.length;b!==k;b++)h.release(_[b]);return}else for(let g=0;g!==E.length;g++){const C=h.get(),z=h.get();o.vmult(y[E[(g+1)%E.length]],C),o.vmult(y[E[(g+2)%E.length]],z),n.vadd(C,C),n.vadd(z,z);const b=Gn;z.vsub(C,b);const k=Hn;b.unit(k);const R=h.get(),L=h.get();s.vsub(C,L);const X=L.dot(k);k.scale(X,R),R.vadd(C,R);const Y=h.get();if(R.vsub(s,Y),X>0&&X*X<b.lengthSquared()&&Y.lengthSquared()<v*v){if(u)return!0;const I=this.createContactEquation(r,c,t,e,l,d);R.vsub(n,I.rj),R.vsub(s,I.ni),I.ni.normalize(),I.ni.scale(v,I.ri),I.rj.vadd(n,I.rj),I.rj.vsub(c.position,I.rj),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult);for(let it=0,ut=_.length;it!==ut;it++)h.release(_[it]);h.release(C),h.release(z),h.release(R),h.release(Y),h.release(L);return}h.release(C),h.release(z),h.release(R),h.release(Y),h.release(L)}for(let g=0,C=_.length;g!==C;g++)h.release(_[g])}}}planeConvex(t,e,s,n,i,o,r,c,l,d,u){const h=Qn,f=Jn;f.set(0,0,1),i.vmult(f,f);let p=0;const y=ti;for(let v=0;v!==e.vertices.length;v++)if(h.copy(e.vertices[v]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,y),f.dot(y)<=0){if(u)return!0;const m=this.createContactEquation(r,c,t,e,l,d),A=ei;f.scale(f.dot(y),A),h.vsub(A,A),A.vsub(s,m.ri),m.ni.copy(f),h.vsub(n,m.rj),m.ri.vadd(s,m.ri),m.ri.vsub(r.position,m.ri),m.rj.vadd(n,m.rj),m.rj.vsub(c.position,m.rj),this.result.push(m),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(m,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,c,l,d,u){const h=e.data,f=t.radius,p=e.elementSize,y=mi,v=fi;O.pointToLocalFrame(n,o,s,v);let w=Math.floor((v.x-f)/p)-1,m=Math.ceil((v.x+f)/p)+1,A=Math.floor((v.y-f)/p)-1,x=Math.ceil((v.y+f)/p)+1;if(m<0||x<0||w>h.length||A>h[0].length)return;w<0&&(w=0),m<0&&(m=0),A<0&&(A=0),x<0&&(x=0),w>=h.length&&(w=h.length-1),m>=h.length&&(m=h.length-1),x>=h[0].length&&(x=h[0].length-1),A>=h[0].length&&(A=h[0].length-1);const E=[];e.getRectMinMax(w,A,m,x,E);const q=E[0],M=E[1];if(v.z-f>M||v.z+f<q)return;const N=this.result;for(let F=w;F<m;F++)for(let T=A;T<x;T++){const P=N.length;let _=!1;if(e.getConvexTrianglePillar(F,T,!1),O.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(_=this.sphereConvex(t,e.pillarConvex,s,y,i,o,r,c,t,e,u)),u&&_||(e.getConvexTrianglePillar(F,T,!0),O.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(_=this.sphereConvex(t,e.pillarConvex,s,y,i,o,r,c,t,e,u)),u&&_))return!0;if(N.length-P>2)return}}boxHeightfield(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,c,l,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,y=ui,v=pi,w=di;O.pointToLocalFrame(n,o,s,w);let m=Math.floor((w.x-p)/f)-1,A=Math.ceil((w.x+p)/f)+1,x=Math.floor((w.y-p)/f)-1,E=Math.ceil((w.y+p)/f)+1;if(A<0||E<0||m>h.length||x>h[0].length)return;m<0&&(m=0),A<0&&(A=0),x<0&&(x=0),E<0&&(E=0),m>=h.length&&(m=h.length-1),A>=h.length&&(A=h.length-1),E>=h[0].length&&(E=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const q=[];e.getRectMinMax(m,x,A,E,q);const M=q[0],N=q[1];if(!(w.z-p>N||w.z+p<M))for(let F=m;F<A;F++)for(let T=x;T<E;T++){let P=!1;if(e.getConvexTrianglePillar(F,T,!1),O.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.convexConvex(t,e.pillarConvex,s,y,i,o,r,c,null,null,u,v,null)),u&&P||(e.getConvexTrianglePillar(F,T,!0),O.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.convexConvex(t,e.pillarConvex,s,y,i,o,r,c,null,null,u,v,null)),u&&P))return!0}}sphereParticle(t,e,s,n,i,o,r,c,l,d,u){const h=ai;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(c,r,e,t,l,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,c,l,d,u){const h=ii;h.set(0,0,1),r.quaternion.vmult(h,h);const f=oi;if(n.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const y=this.createContactEquation(c,r,e,t,l,d);y.ni.copy(h),y.ni.negate(y.ni),y.ri.set(0,0,0);const v=ri;h.scale(h.dot(n),v),n.vsub(v,v),y.rj.copy(v),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexParticle(t,e,s,n,i,o,r,c,l,d,u){let h=-1;const f=li,p=hi;let y=null;const v=ci;if(v.copy(n),v.vsub(s,v),i.conjugate(fe),fe.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,m=t.faces.length;w!==m;w++){const A=[t.worldVertices[t.faces[w][0]]],x=t.worldFaceNormals[w];n.vsub(A[0],me);const E=-x.dot(me);if(y===null||Math.abs(E)<Math.abs(y)){if(u)return!0;y=E,h=w,f.copy(x)}}if(h!==-1){const w=this.createContactEquation(c,r,e,t,l,d);f.scale(y,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const m=w.ri,A=w.rj;m.vadd(n,m),m.vsub(c.position,m),A.vadd(s,A),A.vsub(r.position,A),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,c,l,d,u){return this.convexHeightfield(e,t,n,s,o,i,c,r,l,d,u)}particleCylinder(t,e,s,n,i,o,r,c,l,d,u){return this.convexParticle(e,t,n,s,o,i,c,r,l,d,u)}sphereTrimesh(t,e,s,n,i,o,r,c,l,d,u){const h=An,f=xn,p=gn,y=bn,v=En,w=qn,m=Sn,A=wn,x=vn,E=Bn;O.pointToLocalFrame(n,o,s,v);const q=t.radius;m.lowerBound.set(v.x-q,v.y-q,v.z-q),m.upperBound.set(v.x+q,v.y+q,v.z+q),e.getTrianglesInAABB(m,E);const M=yn,N=t.radius*t.radius;for(let g=0;g<E.length;g++)for(let C=0;C<3;C++)if(e.getVertex(e.indices[E[g]*3+C],M),M.vsub(v,x),x.lengthSquared()<=N){if(A.copy(M),O.pointToWorldFrame(n,o,A,M),M.vsub(s,x),u)return!0;let z=this.createContactEquation(r,c,t,e,l,d);z.ni.copy(x),z.ni.normalize(),z.ri.copy(z.ni),z.ri.scale(t.radius,z.ri),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.copy(M),z.rj.vsub(c.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}for(let g=0;g<E.length;g++)for(let C=0;C<3;C++){e.getVertex(e.indices[E[g]*3+C],h),e.getVertex(e.indices[E[g]*3+(C+1)%3],f),f.vsub(h,p),v.vsub(f,w);const z=w.dot(p);v.vsub(h,w);let b=w.dot(p);if(b>0&&z<0&&(v.vsub(h,w),y.copy(p),y.normalize(),b=w.dot(y),y.scale(b,w),w.vadd(h,w),w.distanceTo(v)<t.radius)){if(u)return!0;const R=this.createContactEquation(r,c,t,e,l,d);w.vsub(v,R.ni),R.ni.normalize(),R.ni.scale(t.radius,R.ri),R.ri.vadd(s,R.ri),R.ri.vsub(r.position,R.ri),O.pointToWorldFrame(n,o,w,w),w.vsub(c.position,R.rj),O.vectorToWorldFrame(o,R.ni,R.ni),O.vectorToWorldFrame(o,R.ri,R.ri),this.result.push(R),this.createFrictionEquationsFromContact(R,this.frictionResult)}}const F=zn,T=Cn,P=Mn,_=mn;for(let g=0,C=E.length;g!==C;g++){e.getTriangleVertices(E[g],F,T,P),e.getNormal(E[g],_),v.vsub(F,w);let z=w.dot(_);if(_.scale(z,w),v.vsub(w,w),z=w.distanceTo(v),G.pointInTriangle(w,F,T,P)&&z<t.radius){if(u)return!0;let b=this.createContactEquation(r,c,t,e,l,d);w.vsub(v,b.ni),b.ni.normalize(),b.ni.scale(t.radius,b.ri),b.ri.vadd(s,b.ri),b.ri.vsub(r.position,b.ri),O.pointToWorldFrame(n,o,w,w),w.vsub(c.position,b.rj),O.vectorToWorldFrame(o,b.ni,b.ni),O.vectorToWorldFrame(o,b.ri,b.ri),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,n,i,o,r,c,l,d,u){const h=new a,f=un;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const y=new a;y.copy(h),O.pointToWorldFrame(n,o,y,h);const v=pn;if(h.vsub(s,v),f.dot(v)<=0){if(u)return!0;const m=this.createContactEquation(r,c,t,e,l,d);m.ni.copy(f);const A=fn;f.scale(v.dot(f),A),h.vsub(A,A),m.ri.copy(A),m.ri.vsub(r.position,m.ri),m.rj.copy(h),m.rj.vsub(c.position,m.rj),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}}}const pt=new a,yt=new a,wt=new a,cn=new a,ln=new a,hn=new H,dn=new H,un=new a,pn=new a,fn=new a,mn=new a,vn=new a;new a;const yn=new a,wn=new a,An=new a,xn=new a,gn=new a,bn=new a,En=new a,qn=new a,zn=new a,Cn=new a,Mn=new a,Sn=new $,Bn=[],Rt=new a,pe=new a,Nn=new a,Tn=new a,In=new a;function Pn(W,t,e){let s=null;const n=W.length;for(let i=0;i!==n;i++){const o=W[i],r=Nn;W[(i+1)%n].vsub(o,r);const c=Tn;r.cross(t,c);const l=In;e.vsub(o,l);const d=c.dot(l);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const Lt=new a,Fn=new a,Rn=new a,Ln=new a,_n=[new a,new a,new a,new a,new a,new a],Wn=new a,jn=new a,kn=new a,On=new a,Vn=new a,Gn=new a,Hn=new a,Un=new a,Yn=new a,Dn=new a,Xn=new a,Kn=new a,Zn=new a,$n=new a;new a;new a;const Qn=new a,Jn=new a,ti=new a,ei=new a,si=new a,ni=new a,ii=new a,oi=new a,ri=new a,ai=new a,fe=new H,ci=new a;new a;const li=new a,me=new a,hi=new a,di=new a,ui=new a,pi=[0],fi=new a,mi=new a;class ve{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let c=0;c<i;c++){let l=!1;const d=s[c];for(;d>n[r];)r++;l=d===n[r],l||ye(t,d)}r=0;for(let c=0;c<o;c++){let l=!1;const d=n[c];for(;d>s[r];)r++;l=s[r]===d,l||ye(e,d)}}}function ye(W,t){W.push((t&4294901760)>>16,t&65535)}const Gt=(W,t)=>W<t?`${W}-${t}`:`${t}-${W}`;class vi{constructor(){this.data={keys:[]}}get(t,e){const s=Gt(t,e);return this.data[s]}set(t,e,s){const n=Gt(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=Gt(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class yi extends we{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new a,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new a,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new gs,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new tn,this.constraints=[],this.narrowphase=new an(this),this.collisionMatrix=new se,this.collisionMatrixPrevious=new se,this.bodyOverlapKeeper=new ve,this.shapeOverlapKeeper=new ve,this.contactmaterials=[],this.contactMaterialTable=new vi,this.defaultMaterial=new mt("default"),this.defaultContactMaterial=new xt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof _t?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=G.ALL,s.from=t,s.to=e,s.callback=n,Ht.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=G.ANY,s.from=t,s.to=e,s.result=n,Ht.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=G.CLOSEST,s.from=t,s.to=e,s.result=n,Ht.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof B&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=U.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=U.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(U.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const c=this.bodies[r];c.previousPosition.lerp(c.position,o,c.interpolatedPosition),c.previousQuaternion.slerp(c.quaternion,o,c.interpolatedQuaternion),c.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=bi,n=Ei,i=this.bodies.length,o=this.bodies,r=this.solver,c=this.gravity,l=this.doProfiling,d=this.profile,u=B.DYNAMIC;let h=-1/0;const f=this.constraints,p=gi;c.length();const y=c.x,v=c.y,w=c.z;let m=0;for(l&&(h=U.now()),m=0;m!==i;m++){const g=o[m];if(g.type===u){const C=g.force,z=g.mass;C.x+=z*y,C.y+=z*v,C.z+=z*w}}for(let g=0,C=this.subsystems.length;g!==C;g++)this.subsystems[g].update();l&&(h=U.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),l&&(d.broadphase=U.now()-h);let A=f.length;for(m=0;m!==A;m++){const g=f[m];if(!g.collideConnected)for(let C=s.length-1;C>=0;C-=1)(g.bodyA===s[C]&&g.bodyB===n[C]||g.bodyB===s[C]&&g.bodyA===n[C])&&(s.splice(C,1),n.splice(C,1))}this.collisionMatrixTick(),l&&(h=U.now());const x=xi,E=e.length;for(m=0;m!==E;m++)x.push(e[m]);e.length=0;const q=this.frictionEquations.length;for(m=0;m!==q;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,x,this.frictionEquations,p),l&&(d.narrowphase=U.now()-h),l&&(h=U.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const M=e.length;for(let g=0;g!==M;g++){const C=e[g],z=C.bi,b=C.bj,k=C.si,R=C.sj;let L;if(z.material&&b.material?L=this.getContactMaterial(z.material,b.material)||this.defaultContactMaterial:L=this.defaultContactMaterial,L.friction,z.material&&b.material&&(z.material.friction>=0&&b.material.friction>=0&&z.material.friction*b.material.friction,z.material.restitution>=0&&b.material.restitution>=0&&(C.restitution=z.material.restitution*b.material.restitution)),r.addEquation(C),z.allowSleep&&z.type===B.DYNAMIC&&z.sleepState===B.SLEEPING&&b.sleepState===B.AWAKE&&b.type!==B.STATIC){const X=b.velocity.lengthSquared()+b.angularVelocity.lengthSquared(),Y=b.sleepSpeedLimit**2;X>=Y*2&&(z.wakeUpAfterNarrowphase=!0)}if(b.allowSleep&&b.type===B.DYNAMIC&&b.sleepState===B.SLEEPING&&z.sleepState===B.AWAKE&&z.type!==B.STATIC){const X=z.velocity.lengthSquared()+z.angularVelocity.lengthSquared(),Y=z.sleepSpeedLimit**2;X>=Y*2&&(b.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(z,b,!0),this.collisionMatrixPrevious.get(z,b)||(bt.body=b,bt.contact=C,z.dispatchEvent(bt),bt.body=z,b.dispatchEvent(bt)),this.bodyOverlapKeeper.set(z.id,b.id),this.shapeOverlapKeeper.set(k.id,R.id)}for(this.emitContactEvents(),l&&(d.makeContactConstraints=U.now()-h,h=U.now()),m=0;m!==i;m++){const g=o[m];g.wakeUpAfterNarrowphase&&(g.wakeUp(),g.wakeUpAfterNarrowphase=!1)}for(A=f.length,m=0;m!==A;m++){const g=f[m];g.update();for(let C=0,z=g.equations.length;C!==z;C++){const b=g.equations[C];r.addEquation(b)}}r.solve(t,this),l&&(d.solve=U.now()-h),r.removeAllEquations();const N=Math.pow;for(m=0;m!==i;m++){const g=o[m];if(g.type&u){const C=N(1-g.linearDamping,t),z=g.velocity;z.scale(C,z);const b=g.angularVelocity;if(b){const k=N(1-g.angularDamping,t);b.scale(k,b)}}}this.dispatchEvent(Ai),l&&(h=U.now());const T=this.stepnumber%(this.quatNormalizeSkip+1)===0,P=this.quatNormalizeFast;for(m=0;m!==i;m++)o[m].integrate(t,T,P);this.clearForces(),this.broadphase.dirty=!0,l&&(d.integrate=U.now()-h),this.stepnumber+=1,this.dispatchEvent(wi);let _=!0;if(this.allowSleep)for(_=!1,m=0;m!==i;m++){const g=o[m];g.sleepTick(this.time),g.sleepState!==B.SLEEPING&&(_=!0)}this.hasActiveBodies=_}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(rt,at),t){for(let i=0,o=rt.length;i<o;i+=2)Et.bodyA=this.getBodyById(rt[i]),Et.bodyB=this.getBodyById(rt[i+1]),this.dispatchEvent(Et);Et.bodyA=Et.bodyB=null}if(e){for(let i=0,o=at.length;i<o;i+=2)qt.bodyA=this.getBodyById(at[i]),qt.bodyB=this.getBodyById(at[i+1]),this.dispatchEvent(qt);qt.bodyA=qt.bodyB=null}rt.length=at.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(rt,at),s){for(let i=0,o=rt.length;i<o;i+=2){const r=this.getShapeById(rt[i]),c=this.getShapeById(rt[i+1]);ct.shapeA=r,ct.shapeB=c,r&&(ct.bodyA=r.body),c&&(ct.bodyB=c.body),this.dispatchEvent(ct)}ct.bodyA=ct.bodyB=ct.shapeA=ct.shapeB=null}if(n){for(let i=0,o=at.length;i<o;i+=2){const r=this.getShapeById(at[i]),c=this.getShapeById(at[i+1]);lt.shapeA=r,lt.shapeB=c,r&&(lt.bodyA=r.body),c&&(lt.bodyB=c.body),this.dispatchEvent(lt)}lt.bodyA=lt.bodyB=lt.shapeA=lt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new $;const Ht=new G,U=globalThis.performance||{};if(!U.now){let W=Date.now();U.timing&&U.timing.navigationStart&&(W=U.timing.navigationStart),U.now=()=>Date.now()-W}new a;const wi={type:"postStep"},Ai={type:"preStep"},bt={type:B.COLLIDE_EVENT_NAME,body:null,contact:null},xi=[],gi=[],bi=[],Ei=[],rt=[],at=[],Et={type:"beginContact",bodyA:null,bodyB:null},qt={type:"endContact",bodyA:null,bodyB:null},ct={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},lt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},qi={class:"webgl"},Bi={__name:"physics",setup(W){let t={},e=null;return Ue(()=>{t.destroy(),e.pause()}),Ye(()=>{const s=new Be,n=new Se;t=n;const i={};i.envMapIntensity=3;const o={width:window.innerWidth,height:window.innerHeight},r=new Ne("#ffffff",2);r.castShadow=!0,r.shadow.mapSize.set(1024,1024),r.shadow.camera.far=15,r.shadow.normalBias=.05,r.shadow.camera.left=-7,r.shadow.camera.top=7,r.shadow.camera.right=7,r.shadow.camera.bottom=-7,r.shadow.mapSize.set(1024,1024),r.position.set(5,1,2.25),s.add(r),n.add(r,"intensity").min(0).max(10).step(.001).name("lightIntensity"),n.add(r.position,"x").min(-5).max(5).step(.001).name("lightX"),n.add(r.position,"y").min(-5).max(5).step(.001).name("lightY"),n.add(r.position,"z").min(-5).max(5).step(.001).name("lightZ");const c=new URL(""+new URL("px.a0e41bf9.jpg",import.meta.url).href,self.location).href,l=new URL(""+new URL("nx.57f73ba7.jpg",import.meta.url).href,self.location).href,d=new URL(""+new URL("py.7322f97e.jpg",import.meta.url).href,self.location).href,u=new URL(""+new URL("ny.d209a134.jpg",import.meta.url).href,self.location).href,h=new URL(""+new URL("pz.b0eb9498.jpg",import.meta.url).href,self.location).href,f=new URL(""+new URL("nz.fc946930.jpg",import.meta.url).href,self.location).href,y=new Te().load([c,l,d,u,h,f]);y.encoding=Zt,s.background=y;const v=()=>{s.traverse(j=>{j instanceof Nt&&j.material instanceof Tt&&(j.material.envMap=y,j.material.envMapIntensity=i.envMapIntensity,j.castShadow=!0,j.receiveShadow=!0)})};n.add(i,"envMapIntensity").min(0).max(10).step(.001).onChange(v);const w=new yi;w.broadphase=new At(w),w.allowSleep=!0,w.gravity.set(0,-10.82,0);const m=new mt("concrete"),A=new mt("plastic"),x=new mt("default"),E=new xt(x,x,{friction:.1,restitution:.7}),q=new xt(m,A,{friction:.1,resitution:.7});w.addContactMaterial(q),w.addContactMaterial(E),w.defaultContactMaterial=E;const M=new Qs,N=new B;N.mass=0,N.addShape(M),N.quaternion.setFromAxisAngle(new a(-1,0,0),Math.PI*.5),w.addBody(N);const F=new URL(""+new URL("JadeToad.ae1f4d15.glb",import.meta.url).href,self.location).href;new Qt().load(F,j=>{j.scene.position.y=2.1,j.scene.position.x=-12,j.scene.scale.set(.1,.1,.1),s.add(j.scene),n.add(j.scene.rotation,"y").min(-Math.PI).max(Math.PI).step(.001).name("rotation"),v()});const P=new URL(""+new URL("sttt.6b69edf7.glb",import.meta.url).href,self.location).href;new Qt().load(P,j=>{j.scene.position.x=14,j.scene.position.y=.7,s.add(j.scene),v()});const g=new Ie(75,o.width/o.height,.1,100);g.position.set(3,3,5),s.add(g);const C=new Nt(new Pe(30,30),new Tt({color:"#777777",metalness:.3,roughness:.4,envMap:y,envMapIntensity:.5,side:Fe}));C.receiveShadow=!0,C.rotation.x=-Math.PI*.5,s.add(C);const z=new URL("data:audio/mpeg;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//uUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAAEgACqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//////////////////////////////////////////////////////////////////8AAAAATGF2YzU4LjU3AAAAAAAAAAAAAAAAJAPBAAAAAAAABIAN7TQ9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//uUZAAAAsgWTZVpgAAyYXnCp4wAD4z5V1mXgAEGjqnDMPAAAADYWX0MQSMwcM0WMcEVAFR5pVpzoxukgcJMihNSnM+TDg8ASEAQfDsSz9IIA6JwAACEyq9evuvWLKavOz9eBwfB8Hz4P8ufiCCHKO/lDn9Yf/9eXeU+GOoN28TiGKCKf4t4assZuAO4Ksl7tgQxQPNRAgAABgoD5QEOfoqBCU/1n/5Tw///UCH/w+AAAgAE5dbtnLINQ9Bml5vrclx4AG5+QAI2KoNiIVDHDRVYBK6wjpfkaW6MnCflKxn9Gdnk3WnhLGfNuWZL2dRoEHvP4vi224Ya1E40jWezam1/ve5n7+bFvEj+uqzff/+s+uL7p91x8Rsf518/4xHnqxoSD/V8+FQk0ZQlsCCs9jUujgmyMXh2IPEkm0xcbVpe+g/EgfqY05hyIpYOBysnc79d7rH3a17azWsXWPbdf4DhZARZTf8A/9/6X20KtAAIAACVWGcDeHqJ+SkcKIE2//uUZAkAAvMUzmc9gAA7Qcot55gACZQ69GGMZMjRCVvAxJhwNMCeBPKM4SfC5Kq2GTE9WxB0AEbOsxWSnub1p1a7UJAy8OlhKoKllD3sOiWVcSHmhUJFYVc0e8idyoinhLLPhUZ2NK+v8sSPLTXusX/bZAgAlZ6KFaXYxg4U0SoXInSFG8XJjVJvD1PlcrgmSM+TSJGgaDuWPYLKPFlg0VEVc787+GvWd///WFLpZIFayywGDBWWWWo5GrBQQYGBquxld+yv6K2+pYr/JgmT/S0/+itH+lK1XWK0fpLTf1itF9JaavWK0X0lpv+itF9JaavWK0X0lpqBIUkA7KHRoHxAQI2HsoiERCEFQOEYQPQuL2W/miyihIHgKFRYPGgZFBZ/rFRRt4qLfrFRakxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq",self.location).href;e=new Audio(z);const b=j=>{j.contact.getImpactVelocityAlongNormal()>1.5&&(e.volume=Math.random(),e.currentTime=0,e.play())},k=[],R=new Re(1,20,20),L=new Tt({metalness:.3,roughness:.4,envMap:y,envMapIntensity:.5}),X=(j,ht)=>{const Z=new Nt(R,L);Z.castShadow=!0,Z.scale.set(j,j,j),Z.position.copy(ht),s.add(Z);const St=new $s(j),tt=new B({mass:1,position:new a(0,3,0),shape:St,material:x});tt.position.copy(ht),tt.addEventListener("collide",b),w.addBody(tt),k.push({mesh:Z,body:tt})};i.createSphere=()=>{X(Math.random()*.5,{x:(Math.random()-.5)*3,y:3,z:(Math.random()-.5)*3}),v()},n.add(i,"createSphere");const Y=new Le(1,1,1),I=new Tt({metalness:.3,roughness:.4,envMap:y,envMapIntensity:.5}),it=(j,ht,Z,St)=>{const tt=new Nt(Y,I);tt.scale.set(j,ht,Z),tt.castShadow=!0,tt.position.copy(St),s.add(tt);const Me=new Wt(new a(j*.5,ht*.5,Z*.5)),Bt=new B({mass:1,position:new a(0,3,0),shape:Me,material:x});Bt.position.copy(St),Bt.addEventListener("collide",b),w.addBody(Bt),k.push({mesh:tt,body:Bt})};it(1,1.5,2,{x:0,y:0,z:0}),i.createBox=()=>{it(Math.random(),Math.random(),Math.random(),{x:(Math.random()-.5)*3,y:3,z:(Math.random()-.5)*3}),v()},n.add(i,"createBox"),i.reset=()=>{for(const j of k)j.body.removeEventListener("collide",b),w.removeBody(j.body),s.remove(j.mesh);k.splice(0,k.length),console.log("objectsToUpdate",k)},n.add(i,"reset");const ut=document.querySelector(".webgl"),vt=new _e(g,ut);vt.enableDamping=!0;const D=new We({canvas:ut,antialias:!0});D.physicallyCorrectLights=!0,D.outputEncoding=Zt,D.toneMapping=$t,D.toneMappingExposure=1,D.shadowMap.enable=!0,D.shadowMap.type=je,D.setSize(o.width,o.height),D.setPixelRatio(Math.min(window.devicePixelRatio,2)),D.render(s,g),window.addEventListener("resize",()=>{o.width=window.innerWidth,o.height=window.innerHeight,g.aspect=o.width/o.height,g.updateProjectionMatrix(),D.setSize(o.width,o.height),D.setPixelRatio(Math.min(window.devicePixelRatio,2))}),n.add(D,"toneMapping",{No:ke,LInear:Oe,Reinhard:Ve,Cineon:Ge,ACESilmic:$t}),n.add(D,"toneMappingExposure").min(0).max(10).step(.001);const Mt=new He;let Xt=0;const Kt=()=>{const j=Mt.getElapsedTime(),ht=j-Xt;Xt=j,w.step(1/60,ht,3);for(const Z of k)Z.mesh.position.copy(Z.body.position),Z.mesh.quaternion.copy(Z.body.quaternion);vt.update(),D.render(s,g),window.requestAnimationFrame(Kt)};Kt()}),(s,n)=>(De(),Xe("canvas",qi))}};export{Bi as default};
