System.register(["./OrbitControls-legacy.1f04e8e4.js","./lil-gui.esm-legacy.bf105428.js","./index-legacy.3719ffe5.js"],(function(e,n){"use strict";var i,t,o,a,r,u,l,s,c,v,d,m,w,f,h,g,y,x,p;return{setters:[e=>{i=e.S,t=e.q,o=e.a,a=e.u,r=e.av,u=e.c,l=e.V,s=e.j,c=e.M,v=e.P,d=e.O,m=e.W,w=e.g},e=>{f=e.G},e=>{h=e.a,g=e.o,y=e.b,x=e.c,p=e.d}],execute:function(){const P=[p("canvas",{class:"webgl3"},null,-1)];e("default",{__name:"shaderBeginning",setup(e){const p=new URL(""+new URL("flag-french.36f0c6c6.jpg",n.meta.url).href,self.location).href;let q={};return h((()=>{const e=document.querySelector("canvas.webgl3"),n=new f;q=n;const h=new i,g=(new t).load(p),y=new o(1,1,32,32),x=y.attributes.position.count,P=new Array(x).fill({value:0});P.forEach((e=>e.value=Math.random()));let b=P.map((e=>e.value));const j=Float32Array.from(b);y.setAttribute("aRandom",new a(j,1));const F=new r({vertexShader:"uniform vec2 uFrequency;\nuniform float uTime;\nvarying vec2 vUv;\nvarying float vElevation;\n\nvoid main() {\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n    float elevation = sin(modelPosition.x * uFrequency.x - uTime) * 0.1;\n    elevation += +sin(modelPosition.y * uFrequency.y - uTime) * 0.1;\n    modelPosition.z += elevation;\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    vUv = uv;\n    vElevation = elevation;\n    gl_Position = projectedPosition;\n}",fragmentShader:"precision mediump float;\nuniform vec3 uColor;\nuniform sampler2D uTexture;\nvarying vec2 vUv;\nvarying float vElevation;\nvoid main() {\n    vec4 textureColor = texture2D(uTexture, vUv);\n    textureColor.rgb *= vElevation*2.0 +0.3;\n    gl_FragColor = textureColor;\n}",side:u,uniforms:{uFrequency:{value:new l(10,5)},uTime:{value:0},uColor:{value:new s("#762")},uTexture:{value:g}}});n.add(F.uniforms.uFrequency.value,"x").min(0).max(20).step(.01).name("frequnencyX"),n.add(F.uniforms.uFrequency.value,"y").min(0).max(20).step(.01).name("frequnencyY");const T=new c(y,F);T.scale.y=2/3,h.add(T);const M={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{M.width=window.innerWidth,M.height=window.innerHeight,C.aspect=M.width/M.height,C.updateProjectionMatrix(),R.setSize(M.width,M.height),R.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const C=new v(75,M.width/M.height,.1,100);C.position.set(.25,-.25,1),h.add(C);const E=new d(C,e);E.enableDamping=!0;const R=new m({canvas:e});R.setSize(M.width,M.height),R.setPixelRatio(Math.min(window.devicePixelRatio,2));const S=new w,U=()=>{const e=S.getElapsedTime();F.uniforms.uTime.value=e,E.update(),R.render(h,C),window.requestAnimationFrame(U)};U()})),g((()=>{q.destroy()})),(e,n)=>(y(),x("div",null,P))}})}}}));
